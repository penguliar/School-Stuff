


ARM Macro Assembler    Page 1 


    1 00000000         ; CS 100 Lab 9
    2 00000000         ; Due Date:
    3 00000000         ; Student Name: 
    4 00000000         ; Section: 
    5 00000000         
    6 00000000         ; Title: "Lab9_Main"
    7 00000000         ; © 2021 DigiPen, All Rights Reserved.
    8 00000000         
    9 00000000                 GET              MEGA_project_Data.s ; Get/inclu
                                                            de the data file
    1 00000000                 AREA             DATA, CODE, READONLY
    2 00000000         
    3 00000000 400FE608 
                       RCGCGPIO
                               EQU              0X400FE608  ;Address of GPIO Mo
                                                            dule clock/power, i
                                                            t ACTIVATES PORTS..
                                                            .
    4 00000000         ; ...bit 0 = port A, bit 1 = port B, ... and bit 5 = por
                       t F
    5 00000000         
    6 00000000         ; LEDs should be connected to PB0,PB1,PB2,PB3,PB4,PB5,PB
                       6, and PB7 in a circle, clockwise from top being PB0.
    7 00000000         ; ( 0 up, 1 up/right, 2 right, 3 down/right, 4 down, 5 d
                       own/left, 6 left, 7 up/left)
    8 00000000         
    9 00000000         ;Port A had our UART connections.  Some elements are com
                       mented out and incomplete.  If you finished lab7, then y
                       ou can use that data.
   10 00000000 400043FC 
                       GPIOADATA_RW
                               EQU              0X400043FC  ; Address of Port A
                                                             (DATA)of our micro
                                                            controller (buttons
                                                            )
   11 00000000 40004400 
                       GPIOADIR
                               EQU              0x40004400  ; Address of Port A
                                                             (DIRECTION SETTING
                                                            )of our microcontro
                                                            ller
   12 00000000 4000451C 
                       GPIOADEN
                               EQU              0X4000451C  ; Address of Port A
                                                             (DIGITAL SETTING) 
                                                            of our microcontrol
                                                            ler
   13 00000000 40004420 
                       GPIOAAFSEL
                               EQU              0X40004420  ; Address of Port A
                                                             (alternate functio
                                                            n select) of our mi
                                                            crocontroller port 
                                                            a
   14 00000000 4000452C 
                       GPIOAPCTL
                               EQU              0X4000452C  ; Which alternate f
                                                            unctions are on Por
                                                            t A



ARM Macro Assembler    Page 2 


   15 00000000         
   16 00000000         ; We are using all of port B for analog stick button inp
                       ut
   17 00000000 400053FC 
                       GPIOBDATA_RW
                               EQU              0x400053FC  ; Address of Port B
                                                             (DATA)of our micro
                                                            controller (Buttons
                                                            )
   18 00000000 40005400 
                       GPIOBDIR
                               EQU              0x40005400  ; Address of Port B
                                                             (DIRECTION SETTING
                                                            )of our microcontro
                                                            ller
   19 00000000 4000551C 
                       GPIOBDEN
                               EQU              0x4000551C  ; Address of Port B
                                                             (DIGITAL SETTING) 
                                                            of our microcontrol
                                                            ler
   20 00000000 40005514 
                       GPIOBPUR
                               EQU              0x40005514  ; Address of Port B
                                                             (PULL DOWN) of our
                                                             microcontroller
   21 00000000         
   22 00000000         ; Port E we will use for the ADC inputs
   23 00000000 400243FC 
                       GPIOEDATA_RW
                               EQU              0X400243FC  ; Address of Port E
                                                             (DATA)of our micro
                                                            controller (LEDs)
   24 00000000 40024400 
                       GPIOEDIR
                               EQU              0x40024400  ; Address of Port E
                                                             (DIRECTION SETTING
                                                            )of our microcontro
                                                            ller
   25 00000000 4002451C 
                       GPIOEDEN
                               EQU              0X4002451C  ; Address of Port E
                                                             (DIGITAL SETTING) 
                                                            of our microcontrol
                                                            ler
   26 00000000         
   27 00000000         ;PORT F - TIVABOARD USES PORT F, PINS PF1,PF2, AND PF3 F
                       OR THE ONBOARD RGB LED
   28 00000000 400253FC 
                       GPIOFDATA_RW
                               EQU              0X400253FC  ; ADDRESS OF PORT F
                                                             PINS - DATA REGIST
                                                            ER
   29 00000000 40025400 
                       GPIOFDIR
                               EQU              0X40025400  ; ADDRESS OF PORT F
                                                             - DIRECTION
   30 00000000 4002551C 
                       GPIOFDEN



ARM Macro Assembler    Page 3 


                               EQU              0X4002551C  ; ADDRESS OF PORT F
                                                             PINS - DIGITAL ENA
                                                            BLE
   31 00000000         
   32 00000000         ; Y-Axis Joystick should be connected to PE0 and X-Axis 
                       to PE1
   33 00000000         
   34 00000000         ;ADC General Settings
   35 00000000 400FE638 
                       RCGCADC EQU              0X400FE638  ;******Step 2A*****
                                                            * Power control for
                                                             ADCs 
   36 00000000         ; ...Enables ADC Module, PROVIDES A CLOCK  Bit 0 = MODUL
                       E 0 Bit 1 = MODULE 1  
   37 00000000         
   38 00000000         ;ADC analog mode select Settings for Port E 
   39 00000000 40024528 
                       GPIOEAMSEL
                               EQU              0x40024528  ;*****Step 2C******
                                                            * Address of Port E
                                                             (ANALOG SETTING) o
                                                            f our microcontroll
                                                            er
   40 00000000 40024420 
                       GPIOEAFSEL
                               EQU              0x40024420  ; Not needed for pu
                                                            rely analog port E
   41 00000000         
   42 00000000         ; ...Enables ADC Module, PROVIDES A CLOCK  Bit 0 = MODUL
                       E 0 Bit 1 = MODULE 1  
   43 00000000 40038FC4 
                       ADCPC   EQU              0X40038FC4  ; Select ADC Speed 
                                                            1-125KSPS, 3-250KSP
                                                            S, 5-500KSPS, 7 - 1
                                                            MSPS
   44 00000000 40038000 
                       ADCACTSS
                               EQU              0X40038000  ; Address to enable
                                                             and disable the AD
                                                            C Sequencer (Seq 0 
                                                            = Bit 0) ;;(BIT 0-3
                                                             SEQ 0 -3) BIT 16 -
                                                             (0 IDLE) (1 BUSY) 
                                                            
   45 00000000 40038014 
                       ADCEMUX EQU              0X40038014  ; Select which even
                                                            t triggers the samp
                                                            le sequencer (Seq 0
                                                             bits(0- 3) 0XF = A
                                                            LWAYS)
   46 00000000 40038040 
                       ADCSSMUX0
                               EQU              0X40038040  ; Select which ADC 
                                                            channels will the s
                                                            equencer 0 read (AI
                                                            N3 = PE0, AIN2 = PE
                                                            1)
   47 00000000 40038044 
                       ADCSSCTL0



ARM Macro Assembler    Page 4 


                               EQU              0X40038044  ; Address to config
                                                            ure the sample cont
                                                            rol bits (interrupt
                                                            ion and end of sequ
                                                            encer) 
   48 00000000 40038004 
                       ADCRIS  EQU              0X40038004  ; Registers with th
                                                            e flags for "done" 
                                                            bits 
   49 00000000 40038048 
                       ADCSSFIFO0
                               EQU              0X40038048  ; DATA (BITS 0-11)
   50 00000000 4003800C 
                       ADCISC  EQU              0X4003800C  ; Register that cle
                                                            ars the ADCRIS flag
                                                            s
   51 00000000 40038028 
                       ADCPSSI EQU              0X40038028  ; ADC Sample Sequen
                                                            cer Processor-Initi
                                                            ate (bit 0 is Seque
                                                            ncer 0)
   52 00000000 40038030 
                       ADCSAC  EQU              0X40038030  ; ADC Sample Averag
                                                            ing Control-- 2^ADC
                                                            SAC samples are ave
                                                            raged for result (A
                                                            DCSAC<7)
   53 00000000         
   54 00000000         ;UART ACCESS
   55 00000000 400FE618 
                       RCGCUART
                               EQU              0X400FE618  ; ***2A1- ENABLE UA
                                                            RT MODULE USING THI
                                                            S REGISTER (344)
   56 00000000         
   57 00000000         ;UART general data
   58 00000000 4000C000 
                       UART0   EQU              0x4000C000  ; Base address of a
                                                            ll UART0 functions
   59 00000000 4000C000 
                       UART0DR EQU              UART0       ;***2B address of t
                                                            he UART0 data regis
                                                            ter
   60 00000000 4000C018 
                       UART0FR EQU              UART0+0x18  ;***2B UART0 flag r
                                                            egister 
   61 00000000 4000C024 
                       UART0IBRD
                               EQU              UART0+0x24  ;***2B UART0 intege
                                                            r baud-rate divider
                                                             register
   62 00000000 4000C028 
                       UART0FBRD
                               EQU              UART0+0x28  ;***2B UART0 fracti
                                                            onal baud-rate divi
                                                            der register
   63 00000000 4000C02C 
                       UART0LCRH
                               EQU              UART0+0x2C  ;***2B UART0 Line C



ARM Macro Assembler    Page 5 


                                                            ontrol register
   64 00000000 4000C030 
                       UART0CTL
                               EQU              UART0+0x30  ;***2B UART0 contro
                                                            l register
   65 00000000 4000CFC8 
                       UART0CC EQU              UART0+0xFC8 ;***2B UART0 Clock 
                                                            Configuration regis
                                                            ter
   66 00000000         
   67 00000000         ;constants 
   68 00000000 000000FE 
                       THRESH_LOW
                               EQU              0x0FE       ; lower threshold f
                                                            or axial ADC value
   69 00000000 00000DF0 
                       THRESH_HIGH
                               EQU              0xDF0       ; higher threshold 
                                                            for axial ADC value
                                                            
   70 00000000         
   71 00000000         ; values representing bits to set for activating positio
                       nal LED's
   72 00000000 00000001 
                       LED_UP  EQU              1<<0
   73 00000000 00000004 
                       LED_RIGHT
                               EQU              1<<2
   74 00000000 00000010 
                       LED_DOWN
                               EQU              1<<4
   75 00000000 00000040 
                       LED_LEFT
                               EQU              1<<6
   76 00000000         
   77 00000000         
   78 00000000         ; macros
   79 00000000                 MACRO
   80 00000000                 TRANSMIT8BITS    $BITS_TO_TRANSMIT
   81 00000000                 MOV              R0,#$BITS_TO_TRANSMIT
   82 00000000                 BL               _TRANSMIT
   83 00000000                 MEND
   84 00000000         
   85 00000000                 MACRO
   86 00000000                 WRITEBITS        $addr, $data
   87 00000000                 LDR              R0, =$addr
   88 00000000                 MOV              R1, #$data
   89 00000000                 STR              R1, [R0]
   90 00000000                 MEND
   91 00000000         
   92 00000000                 MACRO
   93 00000000                 SETBITS          $ADDRESS, $BITS
   94 00000000                 LDR              R1,=$BITS
   95 00000000                 LDR              R0,=$ADDRESS
   96 00000000                 BL               _SETBITS
   97 00000000                 MEND
   98 00000000         
   99 00000000                 MACRO
  100 00000000                 CLEARBITS        $ADDRESS, $BITS



ARM Macro Assembler    Page 6 


  101 00000000                 LDR              R1,=$BITS
  102 00000000                 LDR              R0,=$ADDRESS
  103 00000000                 BL               _CLEARBITS
  104 00000000                 MEND
  105 00000000         
  106 00000000                 MACRO
  107 00000000                 DLAY             $DELAYLOOPCOUNT
  108 00000000                 LDR              R0,=$DELAYLOOPCOUNT
  109 00000000                 BL               _DELAY
  110 00000000                 MEND
  111 00000000         
  112 00000000                 END
   10 00000000                 GLOBAL           __main      ; Global main funct
                                                            ion
   11 00000000                 AREA             MEGA_project_Main, CODE, READON
LY 
                                                            ; Area of code that
                                                             is read only
   12 00000000                 ALIGN            2           ; Align the data bo
                                                            undary to a multipl
                                                            e of 2
   13 00000000                 ENTRY                        ; Entry into the co
                                                            de segment
   14 00000000         
   15 00000000         ;======Bit Methods-Nothing-new-here===================;
   16 00000000         ;---------------------------------  
   17 00000000         ; _SETBITS: Sets bits in memory (passing "1001" in R1 wi
                       ll set bits at position 0 and 3 in R0)
   18 00000000         _SETBITS                             ; Turn on bits at a
                                                            ddress R0 specified
                                                             by 1's in R1 
   19 00000000 E92D 4FF0       PUSH             {R4-R11, LR}
   20 00000004 6804            LDR              R4, [R0]
   21 00000006 EA44 0401       ORR              R4, R1
   22 0000000A 6004            STR              R4, [R0]
   23 0000000C E8BD 4FF0       POP              {R4-R11, LR}
   24 00000010 4770            BX               LR
   25 00000012         
   26 00000012         ;--------------------------------- 
   27 00000012         ; _CLEARBITS: Clears bits in memory (passing "1001" in R
                       1 will clear bits at position 0 and 3 in R0)
   28 00000012         _CLEARBITS                           ; Turn off bits at 
                                                            address R0 specifie
                                                            d by 1's in R1
   29 00000012 E92D 4FF0       PUSH             {R4-R11, LR}
   30 00000016 6804            LDR              R4, [R0]
   31 00000018 EA6F 0301       MVN              R3, R1
   32 0000001C EA04 0403       AND              R4, R3
   33 00000020 6004            STR              R4, [R0]
   34 00000022 E8BD 4FF0       POP              {R4-R11, LR}
   35 00000026 4770            BX               LR
   36 00000028         ;----------------------------------
   37 00000028         _DELAY                               ; Loop R0 times
   38 00000028 E92D 4FF0       PUSH             {R4-R11, LR}
   39 0000002C 4682            MOV              R10, R0
   40 0000002E         LOOPDELAY
   41 0000002E F1BA 0A01       SUBS             R10, R10, #1
   42 00000032 F1BA 0F00       CMP              R10, #0
   43 00000036 D1FA            BNE              LOOPDELAY



ARM Macro Assembler    Page 7 


   44 00000038 E8BD 4FF0       POP              {R4-R11, LR}
   45 0000003C 4770            BX               LR
   46 0000003E         
   47 0000003E         ;====================ADC Subroutines====================
                       ===;
   48 0000003E         ;---------------------------------  
   49 0000003E         ; Loops until ADC value is ready to be read
   50 0000003E         ; Inputs: R0 = address of value to read
   51 0000003E         ; Outputs: None
   52 0000003E         _wait_adc
   53 0000003E E92D 4FF0       PUSH             {LR, R4-R11}
   54 00000042         _wait_for_adc_loop                   ; don't keep pushin
                                                            g registers.
   55 00000042         ; STUDENT CODE HERE ****SUBROUTINE STEP A****
   56 00000042 6804            LDR              R4, [R0]
   57 00000044 3C01            SUBS             R4, #2_1
   58 00000046 D1FC            BNE              _wait_for_adc_loop
   59 00000048         ; END STUDENT CODE
   60 00000048 E8BD 4FF0       POP              {LR, R4-R11}
   61 0000004C 4770            BX               LR
   62 0000004E         
   63 0000004E         
   64 0000004E         ;---------------------------------  
   65 0000004E         ; Reads the last 3 nibbles of the register.
   66 0000004E         ; Inputs: R0 = address of value to read
   67 0000004E         ; Outputs: Masked result of ADC in R0
   68 0000004E         _read_adc
   69 0000004E E92D 4FF0       PUSH             {LR, R4-R11}
   70 00000052         ; STUDENT CODE HERE ****SUBROUTINE STEP B****
   71 00000052 6804            LDR              R4, [R0]
   72 00000054 F640 75FF       LDR              R5, =0xFFF
   73 00000058 EA04 0405       AND              R4, R5
   74 0000005C 4620            MOV              R0, R4
   75 0000005E         
   76 0000005E         
   77 0000005E         ; END STUDENT CODE
   78 0000005E E8BD 4FF0       POP              {LR, R4-R11}
   79 00000062 4770            BX               LR
   80 00000064         
   81 00000064         
   82 00000064         ;====================SETUP=======================;
   83 00000064         ;---------------------------------  
   84 00000064         ; Subroutine: ports_activation 
   85 00000064         ; Description: Initializes output Ports so they are set 
                       up for use. If we don't
   86 00000064         ;   do this, the pin won't work. 
   87 00000064         
   88 00000064         _turn_on_ports
   89 00000064 E92D 4FF0       PUSH             { R4-R11, LR } ; stack preserve
                                                            d registers and lin
                                                            k register
   90 00000068         
   91 00000068                 SETBITS          RCGCGPIO, 2_10011 ; A(1), B(2),
                                                             C(4), D(8), E(10),
                                                             F(20), we're only 
                                                            turning on ports A+
                                                            B+E
   94 00000068 F04F 0113       LDR              R1,=2_10011
   95 0000006C 487E            LDR              R0,=RCGCGPIO



ARM Macro Assembler    Page 8 


   96 0000006E F7FF FFC7       BL               _SETBITS
   92 00000072                 SETBITS          GPIOBDEN, 0xFF ;Configure used 
                                                            pins of Port B as d
                                                            igital
   94 00000072 F04F 01FF       LDR              R1,=0xFF
   95 00000076 487D            LDR              R0,=GPIOBDEN
   96 00000078 F7FF FFC2       BL               _SETBITS
   93 0000007C         
   94 0000007C E8BD 4FF0       POP              { R4-R11, LR } ; Restore the li
                                                            nk register and R4-
                                                            R11 in case we chan
                                                            ged them here
   95 00000080 4770            BX               LR          ;Return back to the
                                                             calling subroutine
                                                            .
   96 00000082         
   97 00000082         
   98 00000082         ;---------------------------------  
   99 00000082         ; Subroutine: led_initialization
  100 00000082         ; Description: Initializes our LEDs so they are set up f
                       or output. If we don't
  101 00000082         ;   do this, we will not be able to correctly turn them 
                       on or off later.
  102 00000082         
  103 00000082         _button_initialization
  104 00000082 E92D 4FF0       PUSH             { R4-R11, LR } ; stack preserve
                                                            d registers and lin
                                                            k register
  105 00000086                 SETBITS          GPIOBDIR, 0x00 ; MAKE SURE ALL 
                                                            PORTB PINS (PB0-PB7
                                                            ) ARE SET UP FOR IN
                                                            PUT
   94 00000086 F04F 0100       LDR              R1,=0x00
   95 0000008A 4879            LDR              R0,=GPIOBDIR
   96 0000008C F7FF FFB8       BL               _SETBITS
  106 00000090                 CLEARBITS        GPIOBDATA_RW, 0x00 ; MAKE SURE 
                                                            ALL PORTB PINS (PB0
                                                            -PB7) START WITH 0 
                                                            ON THE INPUT
  101 00000090 F04F 0100       LDR              R1,=0x00
  102 00000094 4877            LDR              R0,=GPIOBDATA_RW
  103 00000096 F7FF FFBC       BL               _CLEARBITS
  107 0000009A                 SETBITS          GPIOBPUR, 0x01 ; MAKE SURE PORT
                                                            B PINS (PB0-PB1) HA
                                                            VE A WEAK PULLDOWN
   94 0000009A F04F 0101       LDR              R1,=0x01
   95 0000009E 4876            LDR              R0,=GPIOBPUR
   96 000000A0 F7FF FFAE       BL               _SETBITS
  108 000000A4 E8BD 4FF0       POP              { R4-R11, LR } ; restore the pr
                                                            eserved registers a
                                                            nd link register
  109 000000A8 4770            BX               LR          ; Return back to th
                                                            e calling subroutin
                                                            e.
  110 000000AA         
  111 000000AA         ;---------------------------------  
  112 000000AA         ; Subroutine: adc_initialization
  113 000000AA         ; Description: Initializes our ADC Module and Sequencer 
                       so they are set up for analog input. 



ARM Macro Assembler    Page 9 


  114 000000AA         
  115 000000AA         _adc_initialization
  116 000000AA E92D 4FF0       PUSH             { R4-R11, LR } ; stack preserve
                                                            d registers and lin
                                                            k register
  117 000000AE         
  118 000000AE         ;---ADC Module Initialization (PP 817): this is copy-pas
                       ted-edited-- see lecture------------
  119 000000AE                 SETBITS          RCGCADC, 0x1 ;1.Enable the ADC 
                                                            clock - RCGCADC (PP
                                                             352).
   94 000000AE F04F 0101       LDR              R1,=0x1
   95 000000B2 4872            LDR              R0,=RCGCADC
   96 000000B4 F7FF FFA4       BL               _SETBITS
  120 000000B8         ;2.We did this in Step 3A -Enable RCGCGPIO register FOR 
                       PORT E(see page 340).
  121 000000B8         ;3.GPIOAFSEL initialize as 0, and we're not using their 
                       digital Alternate function.
  122 000000B8                 CLEARBITS        GPIOEDEN, 0x3 ;4.Config AINx AS
                                                             analog input-clear
                                                             corresponding DEN 
                                                            bit in(GPIOEDEN) (P
                                                            P682).
  101 000000B8 F04F 0103       LDR              R1,=0x3
  102 000000BC 4870            LDR              R0,=GPIOEDEN
  103 000000BE F7FF FFA8       BL               _CLEARBITS
  123 000000C2                 SETBITS          GPIOEAMSEL, 0x3 ;5. WRITE TO GP
                                                            IOEAMSEL (687) ANAL
                                                            OG INPUTS TO BE ANA
                                                            LOG.
   94 000000C2 F04F 0103       LDR              R1,=0x3
   95 000000C6 486F            LDR              R0,=GPIOEAMSEL
   96 000000C8 F7FF FF9A       BL               _SETBITS
  124 000000CC         ;6. SAMPLE SEQUENCER PRIORITY BEYOND SCOPE OF COURSE.
  125 000000CC         
  126 000000CC         ;CONFIGURE Sample Sequencer 0---------------------------
                       ---------------------
  127 000000CC         
  128 000000CC                 CLEARBITS        ADCACTSS, 0x1 ;1. disable SAMPL
                                                            E SEQUENCER-clear A
                                                            SENn bit in ADCACTS
                                                            S.
  101 000000CC F04F 0101       LDR              R1,=0x1
  102 000000D0 486D            LDR              R0,=ADCACTSS
  103 000000D2 F7FF FF9E       BL               _CLEARBITS
  129 000000D6                 CLEARBITS        ADCEMUX, 0xF ;2. SET SS0 TRIGGE
                                                            R IN ADCEMUX TO USE
                                                             'PROCESSOR' TRIGGE
                                                            RING.
  101 000000D6 F04F 010F       LDR              R1,=0xF
  102 000000DA 486C            LDR              R0,=ADCEMUX
  103 000000DC F7FF FF99       BL               _CLEARBITS
  130 000000E0         ;3. NOT using a PWM generator as the trigger source.
  131 000000E0                 WRITEBITS        ADCSSMUX0, 0x00000032 ;SET BITS
                                                             FOR EACH input sou
                                                            rce in the ADCSSMUX
                                                            n register.
   87 000000E0 486B            LDR              R0, =ADCSSMUX0
   88 000000E2 F04F 0132       MOV              R1, #0x00000032



ARM Macro Assembler    Page 10 


   89 000000E6 6001            STR              R1, [R0]
  132 000000E8                 WRITEBITS        ADCSSCTL0, 0x00000060 ;5. SET A
                                                            DCSSCTL0 SO THAT 2N
                                                            D IN SEQUENCE ENDS 
                                                            SEQUENCE AND STARTS
                                                             INTERRUPT.
   87 000000E8 486A            LDR              R0, =ADCSSCTL0
   88 000000EA F04F 0160       MOV              R1, #0x00000060
   89 000000EE 6001            STR              R1, [R0]
  133 000000F0         ;6. SKIP - NOT USING INTERRUPT6. If interrupts are to be
                        used, set the corresponding MASK bit in the ADCIM regis
                       ter.
  134 000000F0         
  135 000000F0                 WRITEBITS        ADCPC, 1    ; set samples per s
                                                            econd to 125,000. 
   87 000000F0 4869            LDR              R0, =ADCPC
   88 000000F2 F04F 0101       MOV              R1, #1
   89 000000F6 6001            STR              R1, [R0]
  136 000000F8                 SETBITS          ADCACTSS, 1 ; Enable sample seq
                                                            uencer 0
   94 000000F8 F04F 0101       LDR              R1,=1
   95 000000FC 4862            LDR              R0,=ADCACTSS
   96 000000FE F7FF FF7F       BL               _SETBITS
  137 00000102         
  138 00000102         ;SERIALIZATION STUFF 
  139 00000102         
  140 00000102                 SETBITS          GPIOADEN, 0X3 ; Enable PA0 and 
                                                            PA1 as digital port
                                                            s (not analog) - al
                                                            ready done, but dem
                                                            onstrating how
   94 00000102 F04F 0103       LDR              R1,=0X3
   95 00000106 4865            LDR              R0,=GPIOADEN
   96 00000108 F7FF FF7A       BL               _SETBITS
  141 0000010C                 SETBITS          RCGCUART, 0X1 ; 3A- enable the 
                                                            UART module 0 (UART
                                                            0) using RCGCUART (
                                                            pp 344)  
   94 0000010C F04F 0101       LDR              R1,=0X1
   95 00000110 4863            LDR              R0,=RCGCUART
   96 00000112 F7FF FF75       BL               _SETBITS
  142 00000116                 SETBITS          RCGCGPIO, 0X0 ; 3B- enable cloc
                                                            k to GPIO module th
                                                            rough RCGCGPIO (pp3
                                                            40/1351)
   94 00000116 F04F 0100       LDR              R1,=0X0
   95 0000011A 4853            LDR              R0,=RCGCGPIO
   96 0000011C F7FF FF70       BL               _SETBITS
  143 00000120                 SETBITS          GPIOAAFSEL, 0X3 ; 3C- Set GPIO 
                                                            Alternate function 
                                                            select GPIOAFSEL (6
                                                            71/1344) for both P
                                                            A0 AND PA1
   94 00000120 F04F 0103       LDR              R1,=0X3
   95 00000124 485F            LDR              R0,=GPIOAAFSEL
   96 00000126 F7FF FF6B       BL               _SETBITS
  144 0000012A         ; No need to configure GPIO drive control or slew rate (
                       Defaults to 2-Ma drive, which is fine)
  145 0000012A         ; No need to configure PMCn fields in GPIOPCTL (Defualts



ARM Macro Assembler    Page 11 


                        to PA0/PA1, which is fine)
  146 0000012A         ; EXAMPLE SPECIFIC TO 9600 BAUD/8BIT/1 STOP/NO PARITY/FI
                       FO OFF/NO INTERRUPTS
  147 0000012A                 CLEARBITS        UART0CTL, 0X1 ; 5A- DISABLE UAR
                                                            T WHILE OPERATING--
                                                             CLEAR UARTEN BIT (
                                                            O) IN UARTCTL 
  101 0000012A F04F 0101       LDR              R1,=0X1
  102 0000012E 485E            LDR              R0,=UART0CTL
  103 00000130 F7FF FF6F       BL               _CLEARBITS
  148 00000134         ; NOTE** PLL IS SET TO 3, SO WE'RE WORKING WITH 48MHz.  
                       *
  149 00000134         ; SET BAUD-RATE-DIVISOR FOR BRD=48,000,000/(CLKDiv-16 or
                        8)(9600)=III.FFFFF  
  150 00000134                 WRITEBITS        UART0IBRD, 156 ; 5B- (Set UART0
                                                            IBRD=III)
   87 00000134 485D            LDR              R0, =UART0IBRD
   88 00000136 F04F 019C       MOV              R1, #156
   89 0000013A 6001            STR              R1, [R0]
  151 0000013C                 WRITEBITS        UART0FBRD, 16 ; 5C- Set UART0FB
                                                            RD = INT(0.FFFFF*64
                                                            +0.5) - FROM 0 TO 6
                                                            4 for fraction
   87 0000013C 485C            LDR              R0, =UART0FBRD
   88 0000013E F04F 0110       MOV              R1, #16
   89 00000142 6001            STR              R1, [R0]
  152 00000144                 WRITEBITS        UART0LCRH, 0x60 ; 5D- Select se
                                                            rial com. parameter
                                                            s in UARTLCRH (8 BI
                                                            TS, the rest should
                                                             be default)
   87 00000144 485B            LDR              R0, =UART0LCRH
   88 00000146 F04F 0160       MOV              R1, #0x60
   89 0000014A 6001            STR              R1, [R0]
  153 0000014C                 WRITEBITS        UART0CC, 0x0 ; 5E- Configure UA
                                                            RT Clock source in 
                                                            UART0CC (DEFAULT=0=
                                                            SYSTEM CLOCK+DIVISO
                                                            R)
   87 0000014C 485A            LDR              R0, =UART0CC
   88 0000014E F04F 0100       MOV              R1, #0x0
   89 00000152 6001            STR              R1, [R0]
  154 00000154                 WRITEBITS        UART0CTL, 2_1100000001 ; 5F- En
                                                            able UART0 for rece
                                                            ive, Enable UART0 f
                                                            or Transmit, Enable
                                                             UART0 total
   87 00000154 4854            LDR              R0, =UART0CTL
   88 00000156 F240 3101       MOV              R1, #2_1100000001
   89 0000015A 6001            STR              R1, [R0]
  155 0000015C         
  156 0000015C         
  157 0000015C E8BD 4FF0       POP              { R4-R11, LR }
  158 00000160 4770            BX               LR          ; Return back to th
                                                            e calling subroutin
                                                            e.
  159 00000162         
  160 00000162         ;-------------------------------------------
  161 00000162         ; Subtroutine: _SEND



ARM Macro Assembler    Page 12 


  162 00000162         ; checks for the output fifo to be clear, then sends low
                       est 8 bits of R0
  163 00000162         
  164 00000162         _TRANSMIT
  165 00000162 E92D 4FF0       PUSH             { R4-R11, LR } ; stack preserve
                                                            d registers and lin
                                                            k register
  166 00000166         _WAIT_FOR_CLEAR_OUTPUT_FIFO
  167 00000166 4955            LDR              R1, =UART0FR ; 6A1- Load the ad
                                                            dress of the UART0 
                                                            Flag register
  168 00000168 680A            LDR              R2, [R1]    ; 6A2- Get the cont
                                                            ents of the UART0 F
                                                            lag register into a
                                                             register we're not
                                                             using
  169 0000016A F012 0F20       TST              R2, #1<<5   ; 6B- Check the Tra
                                                            nsmit FIFO0 Full bi
                                                            t (TXFF) on that re
                                                            gister with a TST (
                                                            single bit ANDS)
  170 0000016E D1FA            BNE              _WAIT_FOR_CLEAR_OUTPUT_FIFO ; 6
                                                            B1- If the Transmit
                                                             FIFO0 IS full, go 
                                                            back to _WAIT_FOR_C
                                                            LEAR_OUTPUT_FIFO
  171 00000170 F000 00FF       AND              R0, #0XFF   ; 6C- Mask out all 
                                                            but the lowest 8 bi
                                                            ts for sending from
                                                             R0
  172 00000174 4E52            LDR              R6, =UART0DR ; 6D1- Place the d
                                                            ata in R0 into the 
                                                            UART0Data Register 
                                                            (UART0DR)
  173 00000176 6030            STR              R0, [R6]    ; 6D2- (two lines)
  174 00000178 E8BD 4FF0       POP              { R4-R11, LR } ; Pop back the p
                                                            reserved registers 
                                                            and link register
  175 0000017C 4770            BX               LR          ; Return back to th
                                                            e calling subroutin
                                                            e.
  176 0000017E         
  177 0000017E         _RECEIVE
  178 0000017E E92D 4FF0       PUSH             { R4-R11, LR }
  179 00000182         _WAIT_FOR_RECEIVE_OUTPUT_FIFO
  180 00000182 494E            LDR              R1, =UART0FR ; Load the address
                                                             of the UART0 Flag 
                                                            register
  181 00000184 680A            LDR              R2, [R1]    ; Get the contents 
                                                            of the UART0 Flag r
                                                            egister into a regi
                                                            ster we're not usin
                                                            g
  182 00000186 F012 0F10       TST              R2, #1<<4   ; Check the Transmi
                                                            t FIFOO Empty bit (
                                                            RXFE) on that regis
                                                            ter with a TST (sin
                                                            gle bit ANDS)
  183 0000018A D1FA            BNE              _WAIT_FOR_RECEIVE_OUTPUT_FIFO



ARM Macro Assembler    Page 13 


  184 0000018C 484C            LDR              R0, =UART0DR ; Place the data i
                                                            n R0 into the UART0
                                                            Data Register (UART
                                                            0DR)
  185 0000018E 6800            LDR              R0, [R0]
  186 00000190 F000 00FF       AND              R0, #0XFF   ; Mask out all but 
                                                            the lowest 8 bits f
                                                            or sending from R0
  187 00000194 E8BD 4FF0       POP              { R4-R11, LR } ; Pop back the p
                                                            reserved registers 
                                                            and link register
  188 00000198 4770            BX               LR          ; Return back to th
                                                            e calling subroutin
                                                            e.
  189 0000019A         
  190 0000019A         
  191 0000019A         ;-------------------------------------------
  192 0000019A E92D 4FF0 
                       _QUICKSEND
                               PUSH             { R4-R11, LR} ; For debug purpo
                                                            ses
  193 0000019E                 TRANSMIT8BITS    ':'
   81 0000019E F04F 003A       MOV              R0,#':'
   82 000001A2 F7FF FFDE       BL               _TRANSMIT
  194 000001A6                 TRANSMIT8BITS    'D'
   81 000001A6 F04F 0044       MOV              R0,#'D'
   82 000001AA F7FF FFDA       BL               _TRANSMIT
  195 000001AE                 TRANSMIT8BITS    13
   81 000001AE F04F 000D       MOV              R0,#13
   82 000001B2 F7FF FFD6       BL               _TRANSMIT
  196 000001B6                 TRANSMIT8BITS    12
   81 000001B6 F04F 000C       MOV              R0,#12
   82 000001BA F7FF FFD2       BL               _TRANSMIT
  197 000001BE E8BD 4FF0       POP              { R4-R11, LR}
  198 000001C2 4770            BX               LR
  199 000001C4         
  200 000001C4         _TRANSCEND                           ; Bit mask and tran
                                                            slate 12 bits into 
                                                            ASCII, then send it
                                                             through _TRANSLATE
                                                            
  201 000001C4 E92D 4FF0       PUSH             { R4-R11, LR }
  202 000001C8 F100 0030       ADD              R0, #0x30
  203 000001CC 2839            CMP              R0, #0x39
  204 000001CE BFC8 3007       ADDGT            R0, #7
  205 000001D2 F7FF FFC6       BL               _TRANSMIT
  206 000001D6 E8BD 4FF0       POP              { R4-R11, LR }
  207 000001DA 4770            BX               LR
  208 000001DC         
  209 000001DC         ;=======================LOGIC==========================;
                       
  210 000001DC         
  211 000001DC         __main
  212 000001DC         ; Activate PORTS (A, B, E) and corresponding pins 
  213 000001DC F7FF FF42       BL               _turn_on_ports
  214 000001E0         ; Initialize our buttons for input
  215 000001E0 F7FF FF4F       BL               _button_initialization
  216 000001E4         ; Initialize our ADC Module so we can read from PE0 and 
                       PE1 



ARM Macro Assembler    Page 14 


  217 000001E4 F7FF FF61       BL               _adc_initialization
  218 000001E8         
  219 000001E8         
  220 000001E8         ; 5. At this point we need to implement a loop which rea
                       ds the data from each 
  221 000001E8         ;    of the A/D data registers corresponding to the pins
                        we have set up, and 
  222 000001E8         ;    implement logic to decide which, if any, LEDs we sh
                       ould trigger in
  223 000001E8         ;    response. This will occur within the update_loop la
                       bel.
  224 000001E8         
  225 000001E8         loop
  226 000001E8         
  227 000001E8         ; Clear interrupt flag so that we know we're reading a *
                       new* adc conversion 
  228 000001E8                 SETBITS          ADCISC, 0X01 ; STEP 5-1A
   94 000001E8 F04F 0101       LDR              R1,=0X01
   95 000001EC 4835            LDR              R0,=ADCISC
   96 000001EE F7FF FF07       BL               _SETBITS
  229 000001F2         ; Start processor trigger (tell sequencer 0 to start con
                       verting ADCs)
  230 000001F2                 SETBITS          ADCPSSI, 1  ; STEP 5-1B
   94 000001F2 F04F 0101       LDR              R1,=1
   95 000001F6 4834            LDR              R0,=ADCPSSI
   96 000001F8 F7FF FF02       BL               _SETBITS
  231 000001FC         
  232 000001FC         ; Wait until reading is complete (use end flag) STEP 5-2
                       
  233 000001FC 4833            LDR              R0, =ADCRIS ; _wait_adc EXPECTS
                                                             TO HAVE THE ADC-Ra
                                                            w Interrupt Status 
                                                            address loaded into
                                                             r0.
  234 000001FE F7FF FF1E       BL               _wait_adc   ; and come back fro
                                                            m there once you ha
                                                            ve ADC conversions 
                                                            for us.
  235 00000202         
  236 00000202         ; read axes 
  237 00000202 4833            LDR              R0, =ADCSSFIFO0
  238 00000204 F7FF FF23       BL               _read_adc
  239 00000208 4605            MOV              R5, R0      ;STEP 5-3 store the
                                                             first read value--
                                                             x-value-- in R5.
  240 0000020A 4831            LDR              R0, =ADCSSFIFO0
  241 0000020C F7FF FF1F       BL               _read_adc
  242 00000210 4606            MOV              R6, R0      ;STEP 5-4 store y-v
                                                            alue
  243 00000212         
  244 00000212         ; read buttons
  245 00000212 4818            LDR              R0, =GPIOBDATA_RW
  246 00000214 2801            CMP              R0, #2_1
  247 00000216 BFB8 F7FF 
              FFBF             BLLT             _QUICKSEND
  248 0000021C         
  249 0000021C         ; Reading the 12 bits out of R5 and R6
  250 0000021C F405 6070       AND              R0, R5, 0xF00
  251 00000220 EA4F 2010       LSR              R0, #8



ARM Macro Assembler    Page 15 


  252 00000224 F7FF FFCE       BL               _TRANSCEND
  253 00000228 F005 00F0       AND              R0, R5, #0xF0
  254 0000022C EA4F 1010       LSR              R0, #4
  255 00000230 F7FF FFC8       BL               _TRANSCEND
  256 00000234 F005 000F       AND              R0, R5, 0xF
  257 00000238 F7FF FFC4       BL               _TRANSCEND
  258 0000023C F406 6070       AND              R0, R6, 0xF00
  259 00000240 EA4F 2010       LSR              R0, #8
  260 00000244 F7FF FFBE       BL               _TRANSCEND
  261 00000248 F006 00F0       AND              R0, R6, #0xF0
  262 0000024C EA4F 1010       LSR              R0, #4
  263 00000250 F7FF FFB8       BL               _TRANSCEND
  264 00000254 F006 000F       AND              R0, R6, 0xF
  265 00000258 F7FF FFB4       BL               _TRANSCEND
  266 0000025C                 TRANSMIT8BITS    13
   81 0000025C F04F 000D       MOV              R0,#13
   82 00000260 F7FF FF7F       BL               _TRANSMIT
  267 00000264         
  268 00000264 E7C0            B                loop
  269 00000266         
  270 00000266         ; END STUDENT CODE
  271 00000266         
  272 00000266                 END
              00 00 400FE608 
              4000551C 
              40005400 
              400053FC 
              40005514 
              400FE638 
              4002451C 
              40024528 
              40038000 
              40038014 
              40038040 
              40038044 
              40038FC4 
              4000451C 
              400FE618 
              40004420 
              4000C030 
              4000C024 
              4000C028 
              4000C02C 
              4000CFC8 
              4000C018 
              4000C000 
              4003800C 
              40038028 
              40038004 
              40038048 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\mega_project_main.d -o.\objects\mega_project_main.o -
I.\RTE\_Target_1 -I"C:\Program Files (x86)\Keil_v5\ARM\PACK\ARM\CMSIS\5.6.0\CMS
IS\Core\Include" -I"C:\Program Files (x86)\Keil_v5\ARM\PACK\Keil\TM4C_DFP\1.1.0
\Device\Include\TM4C123" --predefine="__EVAL SETA 1" --predefine="__UVISION_VER
SION SETA 526" --predefine="_RTE_ SETA 1" --predefine="TM4C123GH6PM SETA 1" --l
ist=.\listings\mega_project_main.lst MEGA_project_Main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 1 in file MEGA_project_Data.s
   Uses
      None
Comment: DATA unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

LOOPDELAY 0000002E

Symbol: LOOPDELAY
   Definitions
      At line 40 in file MEGA_project_Main.s
   Uses
      At line 43 in file MEGA_project_Main.s
Comment: LOOPDELAY used once
MEGA_project_Main 00000000

Symbol: MEGA_project_Main
   Definitions
      At line 11 in file MEGA_project_Main.s
   Uses
      None
Comment: MEGA_project_Main unused
_CLEARBITS 00000012

Symbol: _CLEARBITS
   Definitions
      At line 28 in file MEGA_project_Main.s
   Uses
      At line 103 in macro CLEARBITS
      at line 106 in file MEGA_project_Main.s
Comment: _CLEARBITS used once
_DELAY 00000028

Symbol: _DELAY
   Definitions
      At line 37 in file MEGA_project_Main.s
   Uses
      None
Comment: _DELAY unused
_QUICKSEND 0000019A

Symbol: _QUICKSEND
   Definitions
      At line 192 in file MEGA_project_Main.s
   Uses
      At line 247 in file MEGA_project_Main.s
Comment: _QUICKSEND used once
_RECEIVE 0000017E

Symbol: _RECEIVE
   Definitions
      At line 177 in file MEGA_project_Main.s
   Uses
      None
Comment: _RECEIVE unused
_SETBITS 00000000

Symbol: _SETBITS
   Definitions
      At line 18 in file MEGA_project_Main.s
   Uses
      At line 96 in macro SETBITS
      at line 91 in file MEGA_project_Main.s
Comment: _SETBITS used once
_TRANSCEND 000001C4



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: _TRANSCEND
   Definitions
      At line 200 in file MEGA_project_Main.s
   Uses
      At line 252 in file MEGA_project_Main.s
      At line 255 in file MEGA_project_Main.s
      At line 257 in file MEGA_project_Main.s
      At line 260 in file MEGA_project_Main.s
      At line 263 in file MEGA_project_Main.s
      At line 265 in file MEGA_project_Main.s

_TRANSMIT 00000162

Symbol: _TRANSMIT
   Definitions
      At line 164 in file MEGA_project_Main.s
   Uses
      At line 82 in macro TRANSMIT8BITS
      at line 193 in file MEGA_project_Main.s
      At line 205 in file MEGA_project_Main.s

_WAIT_FOR_CLEAR_OUTPUT_FIFO 00000166

Symbol: _WAIT_FOR_CLEAR_OUTPUT_FIFO
   Definitions
      At line 166 in file MEGA_project_Main.s
   Uses
      At line 170 in file MEGA_project_Main.s
Comment: _WAIT_FOR_CLEAR_OUTPUT_FIFO used once
_WAIT_FOR_RECEIVE_OUTPUT_FIFO 00000182

Symbol: _WAIT_FOR_RECEIVE_OUTPUT_FIFO
   Definitions
      At line 179 in file MEGA_project_Main.s
   Uses
      At line 183 in file MEGA_project_Main.s
Comment: _WAIT_FOR_RECEIVE_OUTPUT_FIFO used once
__main 000001DC

Symbol: __main
   Definitions
      At line 211 in file MEGA_project_Main.s
   Uses
      At line 10 in file MEGA_project_Main.s
Comment: __main used once
_adc_initialization 000000AA

Symbol: _adc_initialization
   Definitions
      At line 115 in file MEGA_project_Main.s
   Uses
      At line 217 in file MEGA_project_Main.s
Comment: _adc_initialization used once
_button_initialization 00000082

Symbol: _button_initialization
   Definitions
      At line 103 in file MEGA_project_Main.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 215 in file MEGA_project_Main.s
Comment: _button_initialization used once
_read_adc 0000004E

Symbol: _read_adc
   Definitions
      At line 68 in file MEGA_project_Main.s
   Uses
      At line 238 in file MEGA_project_Main.s
      At line 241 in file MEGA_project_Main.s

_turn_on_ports 00000064

Symbol: _turn_on_ports
   Definitions
      At line 88 in file MEGA_project_Main.s
   Uses
      At line 213 in file MEGA_project_Main.s
Comment: _turn_on_ports used once
_wait_adc 0000003E

Symbol: _wait_adc
   Definitions
      At line 52 in file MEGA_project_Main.s
   Uses
      At line 234 in file MEGA_project_Main.s
Comment: _wait_adc used once
_wait_for_adc_loop 00000042

Symbol: _wait_for_adc_loop
   Definitions
      At line 54 in file MEGA_project_Main.s
   Uses
      At line 58 in file MEGA_project_Main.s
Comment: _wait_for_adc_loop used once
loop 000001E8

Symbol: loop
   Definitions
      At line 225 in file MEGA_project_Main.s
   Uses
      At line 268 in file MEGA_project_Main.s
Comment: loop used once
19 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

ADCACTSS 40038000

Symbol: ADCACTSS
   Definitions
      At line 44 in file MEGA_project_Data.s
   Uses
      At line 102 in macro CLEARBITS
      at line 128 in file MEGA_project_Main.s
      At line 95 in macro SETBITS
      at line 136 in file MEGA_project_Main.s

ADCEMUX 40038014

Symbol: ADCEMUX
   Definitions
      At line 45 in file MEGA_project_Data.s
   Uses
      At line 102 in macro CLEARBITS
      at line 129 in file MEGA_project_Main.s
Comment: ADCEMUX used once
ADCISC 4003800C

Symbol: ADCISC
   Definitions
      At line 50 in file MEGA_project_Data.s
   Uses
      At line 95 in macro SETBITS
      at line 228 in file MEGA_project_Main.s
Comment: ADCISC used once
ADCPC 40038FC4

Symbol: ADCPC
   Definitions
      At line 43 in file MEGA_project_Data.s
   Uses
      At line 87 in macro WRITEBITS
      at line 135 in file MEGA_project_Main.s
Comment: ADCPC used once
ADCPSSI 40038028

Symbol: ADCPSSI
   Definitions
      At line 51 in file MEGA_project_Data.s
   Uses
      At line 95 in macro SETBITS
      at line 230 in file MEGA_project_Main.s
Comment: ADCPSSI used once
ADCRIS 40038004

Symbol: ADCRIS
   Definitions
      At line 48 in file MEGA_project_Data.s
   Uses
      At line 233 in file MEGA_project_Main.s
Comment: ADCRIS used once
ADCSAC 40038030

Symbol: ADCSAC
   Definitions



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

      At line 52 in file MEGA_project_Data.s
   Uses
      None
Comment: ADCSAC unused
ADCSSCTL0 40038044

Symbol: ADCSSCTL0
   Definitions
      At line 47 in file MEGA_project_Data.s
   Uses
      At line 87 in macro WRITEBITS
      at line 132 in file MEGA_project_Main.s
Comment: ADCSSCTL0 used once
ADCSSFIFO0 40038048

Symbol: ADCSSFIFO0
   Definitions
      At line 49 in file MEGA_project_Data.s
   Uses
      At line 237 in file MEGA_project_Main.s
      At line 240 in file MEGA_project_Main.s

ADCSSMUX0 40038040

Symbol: ADCSSMUX0
   Definitions
      At line 46 in file MEGA_project_Data.s
   Uses
      At line 87 in macro WRITEBITS
      at line 131 in file MEGA_project_Main.s
Comment: ADCSSMUX0 used once
GPIOAAFSEL 40004420

Symbol: GPIOAAFSEL
   Definitions
      At line 13 in file MEGA_project_Data.s
   Uses
      At line 95 in macro SETBITS
      at line 143 in file MEGA_project_Main.s
Comment: GPIOAAFSEL used once
GPIOADATA_RW 400043FC

Symbol: GPIOADATA_RW
   Definitions
      At line 10 in file MEGA_project_Data.s
   Uses
      None
Comment: GPIOADATA_RW unused
GPIOADEN 4000451C

Symbol: GPIOADEN
   Definitions
      At line 12 in file MEGA_project_Data.s
   Uses
      At line 95 in macro SETBITS
      at line 140 in file MEGA_project_Main.s
Comment: GPIOADEN used once
GPIOADIR 40004400




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

Symbol: GPIOADIR
   Definitions
      At line 11 in file MEGA_project_Data.s
   Uses
      None
Comment: GPIOADIR unused
GPIOAPCTL 4000452C

Symbol: GPIOAPCTL
   Definitions
      At line 14 in file MEGA_project_Data.s
   Uses
      None
Comment: GPIOAPCTL unused
GPIOBDATA_RW 400053FC

Symbol: GPIOBDATA_RW
   Definitions
      At line 17 in file MEGA_project_Data.s
   Uses
      At line 102 in macro CLEARBITS
      at line 106 in file MEGA_project_Main.s
      At line 245 in file MEGA_project_Main.s

GPIOBDEN 4000551C

Symbol: GPIOBDEN
   Definitions
      At line 19 in file MEGA_project_Data.s
   Uses
      At line 95 in macro SETBITS
      at line 92 in file MEGA_project_Main.s
Comment: GPIOBDEN used once
GPIOBDIR 40005400

Symbol: GPIOBDIR
   Definitions
      At line 18 in file MEGA_project_Data.s
   Uses
      At line 95 in macro SETBITS
      at line 105 in file MEGA_project_Main.s
Comment: GPIOBDIR used once
GPIOBPUR 40005514

Symbol: GPIOBPUR
   Definitions
      At line 20 in file MEGA_project_Data.s
   Uses
      At line 95 in macro SETBITS
      at line 107 in file MEGA_project_Main.s
Comment: GPIOBPUR used once
GPIOEAFSEL 40024420

Symbol: GPIOEAFSEL
   Definitions
      At line 40 in file MEGA_project_Data.s
   Uses
      None
Comment: GPIOEAFSEL unused



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols

GPIOEAMSEL 40024528

Symbol: GPIOEAMSEL
   Definitions
      At line 39 in file MEGA_project_Data.s
   Uses
      At line 95 in macro SETBITS
      at line 123 in file MEGA_project_Main.s
Comment: GPIOEAMSEL used once
GPIOEDATA_RW 400243FC

Symbol: GPIOEDATA_RW
   Definitions
      At line 23 in file MEGA_project_Data.s
   Uses
      None
Comment: GPIOEDATA_RW unused
GPIOEDEN 4002451C

Symbol: GPIOEDEN
   Definitions
      At line 25 in file MEGA_project_Data.s
   Uses
      At line 102 in macro CLEARBITS
      at line 122 in file MEGA_project_Main.s
Comment: GPIOEDEN used once
GPIOEDIR 40024400

Symbol: GPIOEDIR
   Definitions
      At line 24 in file MEGA_project_Data.s
   Uses
      None
Comment: GPIOEDIR unused
GPIOFDATA_RW 400253FC

Symbol: GPIOFDATA_RW
   Definitions
      At line 28 in file MEGA_project_Data.s
   Uses
      None
Comment: GPIOFDATA_RW unused
GPIOFDEN 4002551C

Symbol: GPIOFDEN
   Definitions
      At line 30 in file MEGA_project_Data.s
   Uses
      None
Comment: GPIOFDEN unused
GPIOFDIR 40025400

Symbol: GPIOFDIR
   Definitions
      At line 29 in file MEGA_project_Data.s
   Uses
      None
Comment: GPIOFDIR unused
LED_DOWN 00000010



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Absolute symbols


Symbol: LED_DOWN
   Definitions
      At line 74 in file MEGA_project_Data.s
   Uses
      None
Comment: LED_DOWN unused
LED_LEFT 00000040

Symbol: LED_LEFT
   Definitions
      At line 75 in file MEGA_project_Data.s
   Uses
      None
Comment: LED_LEFT unused
LED_RIGHT 00000004

Symbol: LED_RIGHT
   Definitions
      At line 73 in file MEGA_project_Data.s
   Uses
      None
Comment: LED_RIGHT unused
LED_UP 00000001

Symbol: LED_UP
   Definitions
      At line 72 in file MEGA_project_Data.s
   Uses
      None
Comment: LED_UP unused
RCGCADC 400FE638

Symbol: RCGCADC
   Definitions
      At line 35 in file MEGA_project_Data.s
   Uses
      At line 95 in macro SETBITS
      at line 119 in file MEGA_project_Main.s
Comment: RCGCADC used once
RCGCGPIO 400FE608

Symbol: RCGCGPIO
   Definitions
      At line 3 in file MEGA_project_Data.s
   Uses
      At line 95 in macro SETBITS
      at line 91 in file MEGA_project_Main.s
Comment: RCGCGPIO used once
RCGCUART 400FE618

Symbol: RCGCUART
   Definitions
      At line 55 in file MEGA_project_Data.s
   Uses
      At line 95 in macro SETBITS
      at line 141 in file MEGA_project_Main.s
Comment: RCGCUART used once
THRESH_HIGH 00000DF0



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Absolute symbols


Symbol: THRESH_HIGH
   Definitions
      At line 69 in file MEGA_project_Data.s
   Uses
      None
Comment: THRESH_HIGH unused
THRESH_LOW 000000FE

Symbol: THRESH_LOW
   Definitions
      At line 68 in file MEGA_project_Data.s
   Uses
      None
Comment: THRESH_LOW unused
UART0 4000C000

Symbol: UART0
   Definitions
      At line 58 in file MEGA_project_Data.s
   Uses
      At line 59 in file MEGA_project_Data.s
      At line 60 in file MEGA_project_Data.s
      At line 61 in file MEGA_project_Data.s
      At line 62 in file MEGA_project_Data.s
      At line 63 in file MEGA_project_Data.s
      At line 64 in file MEGA_project_Data.s
      At line 65 in file MEGA_project_Data.s

UART0CC 4000CFC8

Symbol: UART0CC
   Definitions
      At line 65 in file MEGA_project_Data.s
   Uses
      At line 87 in macro WRITEBITS
      at line 153 in file MEGA_project_Main.s
Comment: UART0CC used once
UART0CTL 4000C030

Symbol: UART0CTL
   Definitions
      At line 64 in file MEGA_project_Data.s
   Uses
      At line 102 in macro CLEARBITS
      at line 147 in file MEGA_project_Main.s
      At line 87 in macro WRITEBITS
      at line 154 in file MEGA_project_Main.s

UART0DR 4000C000

Symbol: UART0DR
   Definitions
      At line 59 in file MEGA_project_Data.s
   Uses
      At line 172 in file MEGA_project_Main.s
      At line 184 in file MEGA_project_Main.s

UART0FBRD 4000C028



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Absolute symbols


Symbol: UART0FBRD
   Definitions
      At line 62 in file MEGA_project_Data.s
   Uses
      At line 87 in macro WRITEBITS
      at line 151 in file MEGA_project_Main.s
Comment: UART0FBRD used once
UART0FR 4000C018

Symbol: UART0FR
   Definitions
      At line 60 in file MEGA_project_Data.s
   Uses
      At line 167 in file MEGA_project_Main.s
      At line 180 in file MEGA_project_Main.s

UART0IBRD 4000C024

Symbol: UART0IBRD
   Definitions
      At line 61 in file MEGA_project_Data.s
   Uses
      At line 87 in macro WRITEBITS
      at line 150 in file MEGA_project_Main.s
Comment: UART0IBRD used once
UART0LCRH 4000C02C

Symbol: UART0LCRH
   Definitions
      At line 63 in file MEGA_project_Data.s
   Uses
      At line 87 in macro WRITEBITS
      at line 152 in file MEGA_project_Main.s
Comment: UART0LCRH used once
44 symbols
401 symbols in table
