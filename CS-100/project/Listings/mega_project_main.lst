


ARM Macro Assembler    Page 1 


    1 00000000         ; CS 100 Lab 9
    2 00000000         ; Due Date:
    3 00000000         ; Student Name: 
    4 00000000         ; Section: 
    5 00000000         
    6 00000000         ; Title: "Lab9_Main"
    7 00000000         ; © 2021 DigiPen, All Rights Reserved.
    8 00000000         
    9 00000000                 GET              MEGA_project_Data.s ; Get/inclu
                                                            de the data file
    1 00000000                 AREA             DATA, CODE, READONLY
    2 00000000         
    3 00000000 400FE608 
                       RCGCGPIO
                               EQU              0X400FE608  ;Address of GPIO Mo
                                                            dule clock/power, i
                                                            t ACTIVATES PORTS..
                                                            .
    4 00000000         ; ...bit 0 = port A, bit 1 = port B, ... and bit 5 = por
                       t F
    5 00000000         
    6 00000000         ; LEDs should be connected to PB0,PB1,PB2,PB3,PB4,PB5,PB
                       6, and PB7 in a circle, clockwise from top being PB0.
    7 00000000         ; ( 0 up, 1 up/right, 2 right, 3 down/right, 4 down, 5 d
                       own/left, 6 left, 7 up/left)
    8 00000000         
    9 00000000         ;Port A had our UART connections.  Some elements are com
                       mented out and incomplete.  If you finished lab7, then y
                       ou can use that data.
   10 00000000 400043FC 
                       GPIOADATA_RW
                               EQU              0X400043FC  ; Address of Port A
                                                             (DATA)of our micro
                                                            controller (buttons
                                                            )
   11 00000000 40004400 
                       GPIOADIR
                               EQU              0x40004400  ; Address of Port A
                                                             (DIRECTION SETTING
                                                            )of our microcontro
                                                            ller
   12 00000000 4000451C 
                       GPIOADEN
                               EQU              0X4000451C  ; Address of Port A
                                                             (DIGITAL SETTING) 
                                                            of our microcontrol
                                                            ler
   13 00000000 40004420 
                       GPIOAAFSEL
                               EQU              0X40004420  ; Address of Port A
                                                             (alternate functio
                                                            n select) of our mi
                                                            crocontroller port 
                                                            a
   14 00000000 4000452C 
                       GPIOAPCTL
                               EQU              0X4000452C  ; Which alternate f
                                                            unctions are on Por
                                                            t A



ARM Macro Assembler    Page 2 


   15 00000000         
   16 00000000         ; We are using all of port B for LED output
   17 00000000 400053FC 
                       GPIOBDATA_RW
                               EQU              0X400053FC  ; Address of Port B
                                                             (DATA)of our micro
                                                            controller (LEDs)
   18 00000000 40005400 
                       GPIOBDIR
                               EQU              0x40005400  ; Address of Port B
                                                             (DIRECTION SETTING
                                                            )of our microcontro
                                                            ller
   19 00000000 4000551C 
                       GPIOBDEN
                               EQU              0X4000551C  ; Address of Port B
                                                             (DIGITAL SETTING) 
                                                            of our microcontrol
                                                            ler
   20 00000000         
   21 00000000         ; Port E we will use for the ADC inputs
   22 00000000 400243FC 
                       GPIOEDATA_RW
                               EQU              0X400243FC  ; Address of Port E
                                                             (DATA)of our micro
                                                            controller (LEDs)
   23 00000000 40024400 
                       GPIOEDIR
                               EQU              0x40024400  ; Address of Port E
                                                             (DIRECTION SETTING
                                                            )of our microcontro
                                                            ller
   24 00000000 4002451C 
                       GPIOEDEN
                               EQU              0X4002451C  ; Address of Port E
                                                             (DIGITAL SETTING) 
                                                            of our microcontrol
                                                            ler
   25 00000000         
   26 00000000         ;PORT F - TIVABOARD USES PORT F, PINS PF1,PF2, AND PF3 F
                       OR THE ONBOARD RGB LED
   27 00000000 400253FC 
                       GPIOFDATA_RW
                               EQU              0X400253FC  ; ADDRESS OF PORT F
                                                             PINS - DATA REGIST
                                                            ER
   28 00000000 40025400 
                       GPIOFDIR
                               EQU              0X40025400  ; ADDRESS OF PORT F
                                                             - DIRECTION
   29 00000000 4002551C 
                       GPIOFDEN
                               EQU              0X4002551C  ; ADDRESS OF PORT F
                                                             PINS - DIGITAL ENA
                                                            BLE
   30 00000000         
   31 00000000         ; Y-Axis Joystick should be connected to PE0 and X-Axis 
                       to PE1
   32 00000000         



ARM Macro Assembler    Page 3 


   33 00000000         ;ADC General Settings
   34 00000000 400FE638 
                       RCGCADC EQU              0X400FE638  ;******Step 2A*****
                                                            * Power control for
                                                             ADCs 
   35 00000000         ; ...Enables ADC Module, PROVIDES A CLOCK  Bit 0 = MODUL
                       E 0 Bit 1 = MODULE 1  
   36 00000000         
   37 00000000         ;ADC analog mode select Settings for Port E 
   38 00000000 40024528 
                       GPIOEAMSEL
                               EQU              0x40024528  ;*****Step 2C******
                                                            * Address of Port E
                                                             (ANALOG SETTING) o
                                                            f our microcontroll
                                                            er
   39 00000000 40024420 
                       GPIOEAFSEL
                               EQU              0x40024420  ; Not needed for pu
                                                            rely analog port E
   40 00000000         
   41 00000000         ; ...Enables ADC Module, PROVIDES A CLOCK  Bit 0 = MODUL
                       E 0 Bit 1 = MODULE 1  
   42 00000000 40038FC4 
                       ADCPC   EQU              0X40038FC4  ; Select ADC Speed 
                                                            1-125KSPS, 3-250KSP
                                                            S, 5-500KSPS, 7 - 1
                                                            MSPS
   43 00000000 40038000 
                       ADCACTSS
                               EQU              0X40038000  ; Address to enable
                                                             and disable the AD
                                                            C Sequencer (Seq 0 
                                                            = Bit 0) ;;(BIT 0-3
                                                             SEQ 0 -3) BIT 16 -
                                                             (0 IDLE) (1 BUSY) 
                                                            
   44 00000000 40038014 
                       ADCEMUX EQU              0X40038014  ; Select which even
                                                            t triggers the samp
                                                            le sequencer (Seq 0
                                                             bits(0- 3) 0XF = A
                                                            LWAYS)
   45 00000000 40038040 
                       ADCSSMUX0
                               EQU              0X40038040  ; Select which ADC 
                                                            channels will the s
                                                            equencer 0 read (AI
                                                            N3 = PE0, AIN2 = PE
                                                            1)
   46 00000000 40038044 
                       ADCSSCTL0
                               EQU              0X40038044  ; Address to config
                                                            ure the sample cont
                                                            rol bits (interrupt
                                                            ion and end of sequ
                                                            encer) 
   47 00000000 40038004 
                       ADCRIS  EQU              0X40038004  ; Registers with th



ARM Macro Assembler    Page 4 


                                                            e flags for "done" 
                                                            bits 
   48 00000000 40038048 
                       ADCSSFIFO0
                               EQU              0X40038048  ; DATA (BITS 0-11)
   49 00000000 4003800C 
                       ADCISC  EQU              0X4003800C  ; Register that cle
                                                            ars the ADCRIS flag
                                                            s
   50 00000000 40038028 
                       ADCPSSI EQU              0X40038028  ; ADC Sample Sequen
                                                            cer Processor-Initi
                                                            ate (bit 0 is Seque
                                                            ncer 0)
   51 00000000 40038030 
                       ADCSAC  EQU              0X40038030  ; ADC Sample Averag
                                                            ing Control-- 2^ADC
                                                            SAC samples are ave
                                                            raged for result (A
                                                            DCSAC<7)
   52 00000000         
   53 00000000         ;UART ACCESS
   54 00000000 400FE618 
                       RCGCUART
                               EQU              0X400FE618  ; ***2A1- ENABLE UA
                                                            RT MODULE USING THI
                                                            S REGISTER (344)
   55 00000000         
   56 00000000         ;UART general data
   57 00000000 4000C000 
                       UART0   EQU              0x4000C000  ; Base address of a
                                                            ll UART0 functions
   58 00000000 4000C000 
                       UART0DR EQU              UART0       ;***2B address of t
                                                            he UART0 data regis
                                                            ter
   59 00000000 4000C018 
                       UART0FR EQU              UART0+0x18  ;***2B UART0 flag r
                                                            egister 
   60 00000000 4000C024 
                       UART0IBRD
                               EQU              UART0+0x24  ;***2B UART0 intege
                                                            r baud-rate divider
                                                             register
   61 00000000 4000C028 
                       UART0FBRD
                               EQU              UART0+0x28  ;***2B UART0 fracti
                                                            onal baud-rate divi
                                                            der register
   62 00000000 4000C02C 
                       UART0LCRH
                               EQU              UART0+0x2C  ;***2B UART0 Line C
                                                            ontrol register
   63 00000000 4000C030 
                       UART0CTL
                               EQU              UART0+0x30  ;***2B UART0 contro
                                                            l register
   64 00000000 4000CFC8 
                       UART0CC EQU              UART0+0xFC8 ;***2B UART0 Clock 



ARM Macro Assembler    Page 5 


                                                            Configuration regis
                                                            ter
   65 00000000         
   66 00000000         ;constants 
   67 00000000 000000FE 
                       THRESH_LOW
                               EQU              0x0FE       ; lower threshold f
                                                            or axial ADC value
   68 00000000 00000DF0 
                       THRESH_HIGH
                               EQU              0xDF0       ; higher threshold 
                                                            for axial ADC value
                                                            
   69 00000000         
   70 00000000         ; values representing bits to set for activating positio
                       nal LED's
   71 00000000 00000001 
                       LED_UP  EQU              1<<0
   72 00000000 00000004 
                       LED_RIGHT
                               EQU              1<<2
   73 00000000 00000010 
                       LED_DOWN
                               EQU              1<<4
   74 00000000 00000040 
                       LED_LEFT
                               EQU              1<<6
   75 00000000         
   76 00000000         
   77 00000000         ; macros
   78 00000000                 MACRO
   79 00000000                 TRANSMIT8BITS    $BITS_TO_TRANSMIT
   80 00000000                 MOV              R0,#$BITS_TO_TRANSMIT
   81 00000000                 BL               _TRANSMIT
   82 00000000                 MEND
   83 00000000         
   84 00000000                 MACRO
   85 00000000                 WRITEBITS        $addr, $data
   86 00000000                 LDR              R0, =$addr
   87 00000000                 MOV              R1, #$data
   88 00000000                 STR              R1, [R0]
   89 00000000                 MEND
   90 00000000         
   91 00000000                 MACRO
   92 00000000                 SETBITS          $ADDRESS, $BITS
   93 00000000                 LDR              R1,=$BITS
   94 00000000                 LDR              R0,=$ADDRESS
   95 00000000                 BL               _SETBITS
   96 00000000                 MEND
   97 00000000         
   98 00000000                 MACRO
   99 00000000                 CLEARBITS        $ADDRESS, $BITS
  100 00000000                 LDR              R1,=$BITS
  101 00000000                 LDR              R0,=$ADDRESS
  102 00000000                 BL               _CLEARBITS
  103 00000000                 MEND
  104 00000000         
  105 00000000                 MACRO
  106 00000000                 DLAY             $DELAYLOOPCOUNT



ARM Macro Assembler    Page 6 


  107 00000000                 LDR              R0,=$DELAYLOOPCOUNT
  108 00000000                 BL               _DELAY
  109 00000000                 MEND
  110 00000000         
  111 00000000                 END
   10 00000000                 GLOBAL           __main      ; Global main funct
                                                            ion
   11 00000000                 AREA             MEGA_project_Main, CODE, READON
LY 
                                                            ; Area of code that
                                                             is read only
   12 00000000                 ALIGN            2           ; Align the data bo
                                                            undary to a multipl
                                                            e of 2
   13 00000000                 ENTRY                        ; Entry into the co
                                                            de segment
   14 00000000         
   15 00000000         ;======Bit Methods-Nothing-new-here===================;
   16 00000000         ;---------------------------------  
   17 00000000         ; _SETBITS: Sets bits in memory (passing "1001" in R1 wi
                       ll set bits at position 0 and 3 in R0)
   18 00000000         _SETBITS                             ; Turn on bits at a
                                                            ddress R0 specified
                                                             by 1's in R1 
   19 00000000 E92D 4FF0       PUSH             {R4-R11, LR}
   20 00000004 6804            LDR              R4, [R0]
   21 00000006 EA44 0401       ORR              R4, R1
   22 0000000A 6004            STR              R4, [R0]
   23 0000000C E8BD 4FF0       POP              {R4-R11, LR}
   24 00000010 4770            BX               LR
   25 00000012         
   26 00000012         ;--------------------------------- 
   27 00000012         ; _CLEARBITS: Clears bits in memory (passing "1001" in R
                       1 will clear bits at position 0 and 3 in R0)
   28 00000012         _CLEARBITS                           ; Turn off bits at 
                                                            address R0 specifie
                                                            d by 1's in R1
   29 00000012 E92D 4FF0       PUSH             {R4-R11, LR}
   30 00000016 6804            LDR              R4, [R0]
   31 00000018 EA6F 0301       MVN              R3, R1
   32 0000001C EA04 0403       AND              R4, R3
   33 00000020 6004            STR              R4, [R0]
   34 00000022 E8BD 4FF0       POP              {R4-R11, LR}
   35 00000026 4770            BX               LR
   36 00000028         ;----------------------------------
   37 00000028         _DELAY                               ; Loop R0 times
   38 00000028 E92D 4FF0       PUSH             {R4-R11, LR}
   39 0000002C 4682            MOV              R10, R0
   40 0000002E         LOOPDELAY
   41 0000002E F1BA 0A01       SUBS             R10, R10, #1
   42 00000032 F1BA 0F00       CMP              R10, #0
   43 00000036 D1FA            BNE              LOOPDELAY
   44 00000038 E8BD 4FF0       POP              {R4-R11, LR}
   45 0000003C 4770            BX               LR
   46 0000003E         
   47 0000003E         ;====================ADC Subroutines====================
                       ===;
   48 0000003E         ;---------------------------------  
   49 0000003E         ; Loops until ADC value is ready to be read



ARM Macro Assembler    Page 7 


   50 0000003E         ; Inputs: R0 = address of value to read
   51 0000003E         ; Outputs: None
   52 0000003E         _wait_adc
   53 0000003E E92D 4FF0       PUSH             {LR, R4-R11}
   54 00000042         _wait_for_adc_loop                   ; don't keep pushin
                                                            g registers.
   55 00000042         ; STUDENT CODE HERE ****SUBROUTINE STEP A****
   56 00000042 6804            LDR              R4, [R0]
   57 00000044 3C01            SUBS             R4, #2_1
   58 00000046 D1FC            BNE              _wait_for_adc_loop
   59 00000048         ; END STUDENT CODE
   60 00000048 E8BD 4FF0       POP              {LR, R4-R11}
   61 0000004C 4770            BX               LR
   62 0000004E         
   63 0000004E         
   64 0000004E         ;---------------------------------  
   65 0000004E         ; Reads the last 3 nibbles of the register.
   66 0000004E         ; Inputs: R0 = address of value to read
   67 0000004E         ; Outputs: Masked result of ADC in R0
   68 0000004E         _read_adc
   69 0000004E E92D 4FF0       PUSH             {LR, R4-R11}
   70 00000052         ; STUDENT CODE HERE ****SUBROUTINE STEP B****
   71 00000052 6804            LDR              R4, [R0]
   72 00000054 F640 75FF       LDR              R5, =0xFFF
   73 00000058 EA04 0405       AND              R4, R5
   74 0000005C 4620            MOV              R0, R4
   75 0000005E         
   76 0000005E         
   77 0000005E         ; END STUDENT CODE
   78 0000005E E8BD 4FF0       POP              {LR, R4-R11}
   79 00000062 4770            BX               LR
   80 00000064         
   81 00000064         
   82 00000064         ;====================SETUP=======================;
   83 00000064         ;---------------------------------  
   84 00000064         ; Subroutine: ports_activation 
   85 00000064         ; Description: Initializes output Ports so they are set 
                       up for use. If we don't
   86 00000064         ;   do this, the pin won't work. 
   87 00000064         
   88 00000064         _led_pins_activation
   89 00000064 E92D 4FF0       PUSH             { R4-R11, LR } ; stack preserve
                                                            d registers and lin
                                                            k register
   90 00000068         
   91 00000068                 SETBITS          RCGCGPIO, 2_10011 ; A(1), B(2),
                                                             C(4), D(8), E(10),
                                                             F(20), we're only 
                                                            turning on ports A+
                                                            B+E
   93 00000068 F04F 0113       LDR              R1,=2_10011
   94 0000006C 48A3            LDR              R0,=RCGCGPIO
   95 0000006E F7FF FFC7       BL               _SETBITS
   92 00000072                 SETBITS          GPIOBDEN, 0xFF ;Configure used 
                                                            pins of Port B as d
                                                            igital
   93 00000072 F04F 01FF       LDR              R1,=0xFF
   94 00000076 48A2            LDR              R0,=GPIOBDEN
   95 00000078 F7FF FFC2       BL               _SETBITS



ARM Macro Assembler    Page 8 


   93 0000007C         
   94 0000007C E8BD 4FF0       POP              { R4-R11, LR } ; Restore the li
                                                            nk register and R4-
                                                            R11 in case we chan
                                                            ged them here
   95 00000080 4770            BX               LR          ;Return back to the
                                                             calling subroutine
                                                            .
   96 00000082         
   97 00000082         
   98 00000082         ;---------------------------------  
   99 00000082         ; Subroutine: led_initialization
  100 00000082         ; Description: Initializes our LEDs so they are set up f
                       or output. If we don't
  101 00000082         ;   do this, we will not be able to correctly turn them 
                       on or off later.
  102 00000082         
  103 00000082         _led_initialization
  104 00000082 E92D 4FF0       PUSH             { R4-R11, LR } ; stack preserve
                                                            d registers and lin
                                                            k register
  105 00000086                 SETBITS          GPIOBDIR, 0xFF ; MAKE SURE ALL 
                                                            PORTB PINS (PB0-PB7
                                                            ) ARE SET UP FOR OU
                                                            TPUT
   93 00000086 F04F 01FF       LDR              R1,=0xFF
   94 0000008A 489E            LDR              R0,=GPIOBDIR
   95 0000008C F7FF FFB8       BL               _SETBITS
  106 00000090                 CLEARBITS        GPIOBDATA_RW, 0x00 ; MAKE SURE 
                                                            ALL PORTB PINS (PB0
                                                            -PB7) START WITH 0 
                                                            ON THE OUTPUT 
  100 00000090 F04F 0100       LDR              R1,=0x00
  101 00000094 489C            LDR              R0,=GPIOBDATA_RW
  102 00000096 F7FF FFBC       BL               _CLEARBITS
  107 0000009A E8BD 4FF0       POP              { R4-R11, LR } ; restore the pr
                                                            eserved registers a
                                                            nd link register
  108 0000009E 4770            BX               LR          ; Return back to th
                                                            e calling subroutin
                                                            e.
  109 000000A0         
  110 000000A0         ;---------------------------------  
  111 000000A0         ; Subroutine: adc_initialization
  112 000000A0         ; Description: Initializes our ADC Module and Sequencer 
                       so they are set up for analog input. 
  113 000000A0         
  114 000000A0         _adc_initialization
  115 000000A0 E92D 4FF0       PUSH             { R4-R11, LR } ; stack preserve
                                                            d registers and lin
                                                            k register
  116 000000A4         
  117 000000A4         ;---ADC Module Initialization (PP 817): this is copy-pas
                       ted-edited-- see lecture------------
  118 000000A4                 SETBITS          RCGCADC, 0x1 ;1.Enable the ADC 
                                                            clock - RCGCADC (PP
                                                             352).
   93 000000A4 F04F 0101       LDR              R1,=0x1
   94 000000A8 4898            LDR              R0,=RCGCADC



ARM Macro Assembler    Page 9 


   95 000000AA F7FF FFA9       BL               _SETBITS
  119 000000AE         ;2.We did this in Step 3A -Enable RCGCGPIO register FOR 
                       PORT E(see page 340).
  120 000000AE         ;3.GPIOAFSEL initialize as 0, and we're not using their 
                       digital Alternate function.
  121 000000AE                 CLEARBITS        GPIOEDEN, 0x3 ;4.Config AINx AS
                                                             analog input-clear
                                                             corresponding DEN 
                                                            bit in(GPIOEDEN) (P
                                                            P682).
  100 000000AE F04F 0103       LDR              R1,=0x3
  101 000000B2 4897            LDR              R0,=GPIOEDEN
  102 000000B4 F7FF FFAD       BL               _CLEARBITS
  122 000000B8                 SETBITS          GPIOEAMSEL, 0x3 ;5. WRITE TO GP
                                                            IOEAMSEL (687) ANAL
                                                            OG INPUTS TO BE ANA
                                                            LOG.
   93 000000B8 F04F 0103       LDR              R1,=0x3
   94 000000BC 4895            LDR              R0,=GPIOEAMSEL
   95 000000BE F7FF FF9F       BL               _SETBITS
  123 000000C2         ;6. SAMPLE SEQUENCER PRIORITY BEYOND SCOPE OF COURSE.
  124 000000C2         
  125 000000C2         ;CONFIGURE Sample Sequencer 0---------------------------
                       ---------------------
  126 000000C2         
  127 000000C2                 CLEARBITS        ADCACTSS, 0x1 ;1. disable SAMPL
                                                            E SEQUENCER-clear A
                                                            SENn bit in ADCACTS
                                                            S.
  100 000000C2 F04F 0101       LDR              R1,=0x1
  101 000000C6 4894            LDR              R0,=ADCACTSS
  102 000000C8 F7FF FFA3       BL               _CLEARBITS
  128 000000CC                 CLEARBITS        ADCEMUX, 0xF ;2. SET SS0 TRIGGE
                                                            R IN ADCEMUX TO USE
                                                             'PROCESSOR' TRIGGE
                                                            RING.
  100 000000CC F04F 010F       LDR              R1,=0xF
  101 000000D0 4892            LDR              R0,=ADCEMUX
  102 000000D2 F7FF FF9E       BL               _CLEARBITS
  129 000000D6         ;3. NOT using a PWM generator as the trigger source.
  130 000000D6                 WRITEBITS        ADCSSMUX0, 0x00000032 ;SET BITS
                                                             FOR EACH input sou
                                                            rce in the ADCSSMUX
                                                            n register.
   86 000000D6 4892            LDR              R0, =ADCSSMUX0
   87 000000D8 F04F 0132       MOV              R1, #0x00000032
   88 000000DC 6001            STR              R1, [R0]
  131 000000DE                 WRITEBITS        ADCSSCTL0, 0x00000060 ;5. SET A
                                                            DCSSCTL0 SO THAT 2N
                                                            D IN SEQUENCE ENDS 
                                                            SEQUENCE AND STARTS
                                                             INTERRUPT.
   86 000000DE 4891            LDR              R0, =ADCSSCTL0
   87 000000E0 F04F 0160       MOV              R1, #0x00000060
   88 000000E4 6001            STR              R1, [R0]
  132 000000E6         ;6. SKIP - NOT USING INTERRUPT6. If interrupts are to be
                        used, set the corresponding MASK bit in the ADCIM regis
                       ter.
  133 000000E6         



ARM Macro Assembler    Page 10 


  134 000000E6                 WRITEBITS        ADCPC, 1    ; set samples per s
                                                            econd to 125,000. 
   86 000000E6 4890            LDR              R0, =ADCPC
   87 000000E8 F04F 0101       MOV              R1, #1
   88 000000EC 6001            STR              R1, [R0]
  135 000000EE                 SETBITS          ADCACTSS, 1 ; Enable sample seq
                                                            uencer 0
   93 000000EE F04F 0101       LDR              R1,=1
   94 000000F2 4889            LDR              R0,=ADCACTSS
   95 000000F4 F7FF FF84       BL               _SETBITS
  136 000000F8         
  137 000000F8         ;SERIALIZATION STUFF 
  138 000000F8         
  139 000000F8                 SETBITS          GPIOADEN, 0X3 ; Enable PA0 and 
                                                            PA1 as digital port
                                                            s (not analog) - al
                                                            ready done, but dem
                                                            onstrating how
   93 000000F8 F04F 0103       LDR              R1,=0X3
   94 000000FC 488B            LDR              R0,=GPIOADEN
   95 000000FE F7FF FF7F       BL               _SETBITS
  140 00000102                 SETBITS          RCGCUART, 0X1 ; 3A- enable the 
                                                            UART module 0 (UART
                                                            0) using RCGCUART (
                                                            pp 344)  
   93 00000102 F04F 0101       LDR              R1,=0X1
   94 00000106 488A            LDR              R0,=RCGCUART
   95 00000108 F7FF FF7A       BL               _SETBITS
  141 0000010C                 SETBITS          RCGCGPIO, 0X0 ; 3B- enable cloc
                                                            k to GPIO module th
                                                            rough RCGCGPIO (pp3
                                                            40/1351)
   93 0000010C F04F 0100       LDR              R1,=0X0
   94 00000110 487A            LDR              R0,=RCGCGPIO
   95 00000112 F7FF FF75       BL               _SETBITS
  142 00000116                 SETBITS          GPIOAAFSEL, 0X3 ; 3C- Set GPIO 
                                                            Alternate function 
                                                            select GPIOAFSEL (6
                                                            71/1344) for both P
                                                            A0 AND PA1
   93 00000116 F04F 0103       LDR              R1,=0X3
   94 0000011A 4886            LDR              R0,=GPIOAAFSEL
   95 0000011C F7FF FF70       BL               _SETBITS
  143 00000120         ; No need to configure GPIO drive control or slew rate (
                       Defaults to 2-Ma drive, which is fine)
  144 00000120         ; No need to configure PMCn fields in GPIOPCTL (Defualts
                        to PA0/PA1, which is fine)
  145 00000120         ; EXAMPLE SPECIFIC TO 9600 BAUD/8BIT/1 STOP/NO PARITY/FI
                       FO OFF/NO INTERRUPTS
  146 00000120                 CLEARBITS        UART0CTL, 0X1 ; 5A- DISABLE UAR
                                                            T WHILE OPERATING--
                                                             CLEAR UARTEN BIT (
                                                            O) IN UARTCTL 
  100 00000120 F04F 0101       LDR              R1,=0X1
  101 00000124 4884            LDR              R0,=UART0CTL
  102 00000126 F7FF FF74       BL               _CLEARBITS
  147 0000012A         ; NOTE** PLL IS SET TO 3, SO WE'RE WORKING WITH 48MHz.  
                       *
  148 0000012A         ; SET BAUD-RATE-DIVISOR FOR BRD=48,000,000/(CLKDiv-16 or



ARM Macro Assembler    Page 11 


                        8)(9600)=III.FFFFF  
  149 0000012A                 WRITEBITS        UART0IBRD, 312 ; 5B- (Set UART0
                                                            IBRD=III)
   86 0000012A 4884            LDR              R0, =UART0IBRD
   87 0000012C F44F 719C       MOV              R1, #312
   88 00000130 6001            STR              R1, [R0]
  150 00000132                 WRITEBITS        UART0FBRD, 32 ; 5C- Set UART0FB
                                                            RD = INT(0.FFFFF*64
                                                            +0.5) - FROM 0 TO 6
                                                            4 for fraction
   86 00000132 4883            LDR              R0, =UART0FBRD
   87 00000134 F04F 0120       MOV              R1, #32
   88 00000138 6001            STR              R1, [R0]
  151 0000013A                 WRITEBITS        UART0LCRH, 0x60 ; 5D- Select se
                                                            rial com. parameter
                                                            s in UARTLCRH (8 BI
                                                            TS, the rest should
                                                             be default)
   86 0000013A 4882            LDR              R0, =UART0LCRH
   87 0000013C F04F 0160       MOV              R1, #0x60
   88 00000140 6001            STR              R1, [R0]
  152 00000142                 WRITEBITS        UART0CC, 0x0 ; 5E- Configure UA
                                                            RT Clock source in 
                                                            UART0CC (DEFAULT=0=
                                                            SYSTEM CLOCK+DIVISO
                                                            R)
   86 00000142 4881            LDR              R0, =UART0CC
   87 00000144 F04F 0100       MOV              R1, #0x0
   88 00000148 6001            STR              R1, [R0]
  153 0000014A                 WRITEBITS        UART0CTL, 2_1100000001 ; 5F- En
                                                            able UART0 for rece
                                                            ive, Enable UART0 f
                                                            or Transmit, Enable
                                                             UART0 total
   86 0000014A 487B            LDR              R0, =UART0CTL
   87 0000014C F240 3101       MOV              R1, #2_1100000001
   88 00000150 6001            STR              R1, [R0]
  154 00000152         
  155 00000152         
  156 00000152 E8BD 4FF0       POP              { R4-R11, LR }
  157 00000156 4770            BX               LR          ; Return back to th
                                                            e calling subroutin
                                                            e.
  158 00000158         
  159 00000158         ;-------------------------------------------
  160 00000158         ; Subtroutine: _SEND
  161 00000158         ; checks for the output fifo to be clear, then sends low
                       est 8 bits of R0
  162 00000158         
  163 00000158         _TRANSMIT
  164 00000158 E92D 4FF0       PUSH             { R4-R11, LR } ; stack preserve
                                                            d registers and lin
                                                            k register
  165 0000015C         _WAIT_FOR_CLEAR_OUTPUT_FIFO
  166 0000015C 497B            LDR              R1, =UART0FR ; 6A1- Load the ad
                                                            dress of the UART0 
                                                            Flag register
  167 0000015E 680A            LDR              R2, [R1]    ; 6A2- Get the cont
                                                            ents of the UART0 F



ARM Macro Assembler    Page 12 


                                                            lag register into a
                                                             register we're not
                                                             using
  168 00000160 F012 0F20       TST              R2, #1<<5   ; 6B- Check the Tra
                                                            nsmit FIFO0 Full bi
                                                            t (TXFF) on that re
                                                            gister with a TST (
                                                            single bit ANDS)
  169 00000164 D1FA            BNE              _WAIT_FOR_CLEAR_OUTPUT_FIFO ; 6
                                                            B1- If the Transmit
                                                             FIFO0 IS full, go 
                                                            back to _WAIT_FOR_C
                                                            LEAR_OUTPUT_FIFO
  170 00000166 F000 00FF       AND              R0, #0XFF   ; 6C- Mask out all 
                                                            but the lowest 8 bi
                                                            ts for sending from
                                                             R0
  171 0000016A 4E79            LDR              R6, =UART0DR ; 6D1- Place the d
                                                            ata in R0 into the 
                                                            UART0Data Register 
                                                            (UART0DR)
  172 0000016C 6030            STR              R0, [R6]    ; 6D2- (two lines)
  173 0000016E E8BD 4FF0       POP              { R4-R11, LR } ; Pop back the p
                                                            reserved registers 
                                                            and link register
  174 00000172 4770            BX               LR          ; Return back to th
                                                            e calling subroutin
                                                            e.
  175 00000174         
  176 00000174         _RECEIVE
  177 00000174 E92D 4FF0       PUSH             { R4-R11, LR }
  178 00000178         _WAIT_FOR_RECEIVE_OUTPUT_FIFO
  179 00000178 4974            LDR              R1, =UART0FR ; Load the address
                                                             of the UART0 Flag 
                                                            register
  180 0000017A 680A            LDR              R2, [R1]    ; Get the contents 
                                                            of the UART0 Flag r
                                                            egister into a regi
                                                            ster we're not usin
                                                            g
  181 0000017C F012 0F10       TST              R2, #1<<4   ; Check the Transmi
                                                            t FIFOO Empty bit (
                                                            RXFE) on that regis
                                                            ter with a TST (sin
                                                            gle bit ANDS)
  182 00000180 D1FA            BNE              _WAIT_FOR_RECEIVE_OUTPUT_FIFO
  183 00000182 4873            LDR              R0, =UART0DR ; Place the data i
                                                            n R0 into the UART0
                                                            Data Register (UART
                                                            0DR)
  184 00000184 6800            LDR              R0, [R0]
  185 00000186 F000 00FF       AND              R0, #0XFF   ; Mask out all but 
                                                            the lowest 8 bits f
                                                            or sending from R0
  186 0000018A E8BD 4FF0       POP              { R4-R11, LR } ; Pop back the p
                                                            reserved registers 
                                                            and link register
  187 0000018E 4770            BX               LR          ; Return back to th
                                                            e calling subroutin



ARM Macro Assembler    Page 13 


                                                            e.
  188 00000190         
  189 00000190         
  190 00000190         ;-------------------------------------------
  191 00000190 E92D 4FF0 
                       _QUICKSEND
                               PUSH             { R4-R11, LR} ; For debug purpo
                                                            ses
  192 00000194                 TRANSMIT8BITS    'U'
   80 00000194 F04F 0055       MOV              R0,#'U'
   81 00000198 F7FF FFDE       BL               _TRANSMIT
  193 0000019C                 TRANSMIT8BITS    'p'
   80 0000019C F04F 0070       MOV              R0,#'p'
   81 000001A0 F7FF FFDA       BL               _TRANSMIT
  194 000001A4                 TRANSMIT8BITS    13
   80 000001A4 F04F 000D       MOV              R0,#13
   81 000001A8 F7FF FFD6       BL               _TRANSMIT
  195 000001AC                 TRANSMIT8BITS    12
   80 000001AC F04F 000C       MOV              R0,#12
   81 000001B0 F7FF FFD2       BL               _TRANSMIT
  196 000001B4 E8BD 4FF0       POP              { R4-R11, LR}
  197 000001B8 4770            BX               LR
  198 000001BA         
  199 000001BA         _TRANSCEND                           ; Bit mask and tran
                                                            slate 12 bits into 
                                                            ASCII, then send it
                                                             through _TRANSLATE
                                                            
  200 000001BA E92D 4FF0       PUSH             { R4-R11, LR }
  201 000001BE F100 0030       ADD              R0, #0x30
  202 000001C2 2839            CMP              R0, #0x39
  203 000001C4 BFC8 3007       ADDGT            R0, #7
  204 000001C8 F7FF FFC6       BL               _TRANSMIT
  205 000001CC E8BD 4FF0       POP              { R4-R11, LR }
  206 000001D0 4770            BX               LR
  207 000001D2         
  208 000001D2         ;=======================LOGIC==========================;
                       
  209 000001D2         
  210 000001D2         __main
  211 000001D2         ; Activate PORTS (B, E) and corresponding pins 
  212 000001D2 F7FF FF47       BL               _led_pins_activation
  213 000001D6         
  214 000001D6         ; Initialize our LEDs so we can turn them on/off at will
                       .
  215 000001D6 F7FF FF54       BL               _led_initialization
  216 000001DA         
  217 000001DA         ; Turns on two lights if setbits correctly implemented
  218 000001DA         ; LDR R0, =GPIOBDATA_RW
  219 000001DA         ; MOV R1, #LED_RIGHT
  220 000001DA         ; ADD R1, #LED_DOWN
  221 000001DA         ; BL _SETBITS
  222 000001DA         
  223 000001DA         ; NOP ; BREAKPOINT 1
  224 000001DA         
  225 000001DA         ; BL _CLEARBITS
  226 000001DA         
  227 000001DA         ; NOP ; BREAKPOINT 2
  228 000001DA         



ARM Macro Assembler    Page 14 


  229 000001DA         ; Initialize our ADC Module so we can read from PE0 and 
                       PE1 
  230 000001DA F7FF FF61       BL               _adc_initialization
  231 000001DE         
  232 000001DE         ; 5. At this point we need to implement a loop which rea
                       ds the data from each 
  233 000001DE         ;    of the A/D data registers corresponding to the pins
                        we have set up, and 
  234 000001DE         ;    implement logic to decide which, if any, LEDs we sh
                       ould trigger in
  235 000001DE         ;    response. This will occur within the update_loop la
                       bel.
  236 000001DE         
  237 000001DE F04F 08FE       LDR              R8, =THRESH_LOW
  238 000001E2 F44F 695F       LDR              R9, =THRESH_HIGH
  239 000001E6         
  240 000001E6         loop
  241 000001E6         
  242 000001E6         ; Clear interrupt flag so that we know we're reading a *
                       new* adc conversion 
  243 000001E6                 SETBITS          ADCISC, 0X01 ; STEP 5-1A
   93 000001E6 F04F 0101       LDR              R1,=0X01
   94 000001EA 485A            LDR              R0,=ADCISC
   95 000001EC F7FF FF08       BL               _SETBITS
  244 000001F0         ; Start processor trigger (tell sequencer 0 to start con
                       verting ADCs)
  245 000001F0                 SETBITS          ADCPSSI, 1  ; STEP 5-1B
   93 000001F0 F04F 0101       LDR              R1,=1
   94 000001F4 4858            LDR              R0,=ADCPSSI
   95 000001F6 F7FF FF03       BL               _SETBITS
  246 000001FA         
  247 000001FA         
  248 000001FA         ; Wait until reading is complete (use end flag) STEP 5-2
                       
  249 000001FA 4858            LDR              R0, =ADCRIS ; _wait_adc EXPECTS
                                                             TO HAVE THE ADC-Ra
                                                            w Interrupt Status 
                                                            address loaded into
                                                             r0.
  250 000001FC F7FF FF1F       BL               _wait_adc   ; and come back fro
                                                            m there once you ha
                                                            ve ADC conversions 
                                                            for us.
  251 00000200         
  252 00000200         ; read axes 
  253 00000200 4857            LDR              R0, =ADCSSFIFO0
  254 00000202 F7FF FF24       BL               _read_adc
  255 00000206 4605            MOV              R5, R0      ;STEP 5-3 store the
                                                             first read value--
                                                             x-value-- in R5.
  256 00000208 4855            LDR              R0, =ADCSSFIFO0
  257 0000020A F7FF FF20       BL               _read_adc
  258 0000020E 4606            MOV              R6, R0      ;STEP 5-4 store y-v
                                                            alue
  259 00000210         
  260 00000210         ; Reading the 12 bits out of R5 and R6
  261 00000210 F405 6070       AND              R0, R5, 0xF00
  262 00000214 EA4F 1050       LSR              R0, #5
  263 00000218 F7FF FFCF       BL               _TRANSCEND



ARM Macro Assembler    Page 15 


  264 0000021C F005 00F0       AND              R0, R5, #0xF0
  265 00000220 EA4F 1010       LSR              R0, #4
  266 00000224 F7FF FFC9       BL               _TRANSCEND
  267 00000228 F005 000F       AND              R0, R5, 0xF
  268 0000022C F7FF FFC5       BL               _TRANSCEND
  269 00000230 F406 6070       AND              R0, R6, 0xF00
  270 00000234 EA4F 1050       LSR              R0, #5
  271 00000238 F7FF FFBF       BL               _TRANSCEND
  272 0000023C F006 00F0       AND              R0, R6, #0xF0
  273 00000240 EA4F 1010       LSR              R0, #4
  274 00000244 F7FF FFB9       BL               _TRANSCEND
  275 00000248 F006 000F       AND              R0, R6, 0xF
  276 0000024C F7FF FFB5       BL               _TRANSCEND
  277 00000250                 TRANSMIT8BITS    13
   80 00000250 F04F 000D       MOV              R0,#13
   81 00000254 F7FF FF80       BL               _TRANSMIT
  278 00000258         
  279 00000258         
  280 00000258         
  281 00000258         ; turn off all LEDS (GPIOxDATA_RW - ports for LEDs)
  282 00000258         ; leds_off
  283 00000258         ; CLEARBITS GPIOBDATA_RW, 0XFF ;STEP 5-5 TURN OFF ALL PB
                        OUTPUTS.
  284 00000258         ; STUDENT CODE HERE 
  285 00000258         ; NOP ;****STEP 5A**** REMEMBER: WITHOUT CODE, THERE IS 
                       NO PLACE FOR A BREAKPOINT
  286 00000258         ; CMP R6, #THRESH_HIGH   ;****STEP 6A**** COMPARE R6 WIT
                       H HIGH THRESHOLD, BRANCH TO _TURN_ON_UP_LED IF HIGH,
  287 00000258         ; BLGT _TURN_ON_UP_LED ;****STEP 6C**** IF COMPARE ENDS 
                       WITH OTHER RESULTS, BRANCH TO TURN OFF THAT LED
  288 00000258         ; BLLT _TURN_OFF_UP_LED
  289 00000258         ;****STEP 6D...**** NOW DO THE SAME FOR DOWN, LEFT, AND 
                       RIGHT.
  290 00000258         ; CMP R6, #THRESH_LOW
  291 00000258         ; BLLT _TURN_ON_DOWN_LED
  292 00000258         ; BLGT _TURN_OFF_DOWN_LED
  293 00000258         
  294 00000258         ; CMP R5, #THRESH_HIGH
  295 00000258         ; BLGT _TURN_ON_RIGHT_LED
  296 00000258         ; BLLT _TURN_OFF_RIGHT_LED
  297 00000258         
  298 00000258         ; CMP R5, #THRESH_LOW
  299 00000258         ; BLLT _TURN_ON_LEFT_LED
  300 00000258         ; BLGT _TURN_OFF_LEFT_LED
  301 00000258         
  302 00000258         
  303 00000258         ;****STEP 5A**** REMEMBER: WITHOUT CODE, THERE IS NO PLA
                       CE FOR A BREAKPOINT
  304 00000258         ; CMP R6, #THRESH_HIGH   ;****STEP 6A**** COMPARE R6 WIT
                       H HIGH THRESHOLD, BRANCH TO _TURN_ON_UP_LED IF HIGH,
  305 00000258         ; BLGT _QUICKSEND ;****STEP 6C**** IF COMPARE ENDS WITH 
                       OTHER RESULTS, BRANCH TO TURN OFF THAT LED
  306 00000258         
  307 00000258 E7C5            B                loop
  308 0000025A         
  309 0000025A         _TURN_ON_UP_LED                      ; ****STEP 6B**** C
                                                            REATE A SUBROUTINE 
                                                            HERE THAT TURNS ON 
                                                            LED AND RETURNS



ARM Macro Assembler    Page 16 


  310 0000025A E92D 4FF0       PUSH             { R4-R11, LR }
  311 0000025E                 SETBITS          GPIOBDATA_RW, LED_UP
   93 0000025E F04F 0101       LDR              R1,=LED_UP
   94 00000262 4829            LDR              R0,=GPIOBDATA_RW
   95 00000264 F7FF FECC       BL               _SETBITS
  312 00000268 E8BD 4FF0       POP              { R4-R11, LR }
  313 0000026C 4770            BX               LR
  314 0000026E         
  315 0000026E         _TURN_OFF_UP_LED
  316 0000026E E92D 4FF0       PUSH             { R4-R11, LR }
  317 00000272                 CLEARBITS        GPIOBDATA_RW, LED_UP
  100 00000272 F04F 0101       LDR              R1,=LED_UP
  101 00000276 4824            LDR              R0,=GPIOBDATA_RW
  102 00000278 F7FF FECB       BL               _CLEARBITS
  318 0000027C E8BD 4FF0       POP              { R4-R11, LR }
  319 00000280 4770            BX               LR
  320 00000282         
  321 00000282         _TURN_ON_RIGHT_LED                   ;
  322 00000282 E92D 4FF0       PUSH             { R4-R11, LR }
  323 00000286                 SETBITS          GPIOBDATA_RW, LED_RIGHT
   93 00000286 F04F 0104       LDR              R1,=LED_RIGHT
   94 0000028A 481F            LDR              R0,=GPIOBDATA_RW
   95 0000028C F7FF FEB8       BL               _SETBITS
  324 00000290 E8BD 4FF0       POP              { R4-R11, LR }
  325 00000294 4770            BX               LR
  326 00000296         
  327 00000296         _TURN_OFF_RIGHT_LED
  328 00000296 E92D 4FF0       PUSH             { R4-R11, LR }
  329 0000029A                 CLEARBITS        GPIOBDATA_RW, LED_RIGHT
  100 0000029A F04F 0104       LDR              R1,=LED_RIGHT
  101 0000029E 481A            LDR              R0,=GPIOBDATA_RW
  102 000002A0 F7FF FEB7       BL               _CLEARBITS
  330 000002A4 E8BD 4FF0       POP              { R4-R11, LR }
  331 000002A8 4770            BX               LR
  332 000002AA         
  333 000002AA         _TURN_ON_DOWN_LED                    ;
  334 000002AA E92D 4FF0       PUSH             { R4-R11, LR }
  335 000002AE                 SETBITS          GPIOBDATA_RW, LED_DOWN
   93 000002AE F04F 0110       LDR              R1,=LED_DOWN
   94 000002B2 4815            LDR              R0,=GPIOBDATA_RW
   95 000002B4 F7FF FEA4       BL               _SETBITS
  336 000002B8 E8BD 4FF0       POP              { R4-R11, LR }
  337 000002BC 4770            BX               LR
  338 000002BE         
  339 000002BE         _TURN_OFF_DOWN_LED
  340 000002BE E92D 4FF0       PUSH             { R4-R11, LR }
  341 000002C2                 CLEARBITS        GPIOBDATA_RW, LED_DOWN
  100 000002C2 F04F 0110       LDR              R1,=LED_DOWN
  101 000002C6 4810            LDR              R0,=GPIOBDATA_RW
  102 000002C8 F7FF FEA3       BL               _CLEARBITS
  342 000002CC E8BD 4FF0       POP              { R4-R11, LR }
  343 000002D0 4770            BX               LR
  344 000002D2         
  345 000002D2         _TURN_ON_LEFT_LED                    ;
  346 000002D2 E92D 4FF0       PUSH             { R4-R11, LR }
  347 000002D6                 SETBITS          GPIOBDATA_RW, LED_LEFT
   93 000002D6 F04F 0140       LDR              R1,=LED_LEFT
   94 000002DA 480B            LDR              R0,=GPIOBDATA_RW
   95 000002DC F7FF FE90       BL               _SETBITS



ARM Macro Assembler    Page 17 


  348 000002E0 E8BD 4FF0       POP              { R4-R11, LR }
  349 000002E4 4770            BX               LR
  350 000002E6         
  351 000002E6         _TURN_OFF_LEFT_LED
  352 000002E6 E92D 4FF0       PUSH             { R4-R11, LR }
  353 000002EA                 CLEARBITS        GPIOBDATA_RW, LED_LEFT
  100 000002EA F04F 0140       LDR              R1,=LED_LEFT
  101 000002EE 4806            LDR              R0,=GPIOBDATA_RW
  102 000002F0 F7FF FE8F       BL               _CLEARBITS
  354 000002F4 E8BD 4FF0       POP              { R4-R11, LR }
  355 000002F8 4770            BX               LR
  356 000002FA         
  357 000002FA         ; END STUDENT CODE
  358 000002FA         
  359 000002FA                 END
              00 00 400FE608 
              4000551C 
              40005400 
              400053FC 
              400FE638 
              4002451C 
              40024528 
              40038000 
              40038014 
              40038040 
              40038044 
              40038FC4 
              4000451C 
              400FE618 
              40004420 
              4000C030 
              4000C024 
              4000C028 
              4000C02C 
              4000CFC8 
              4000C018 
              4000C000 
              4003800C 
              40038028 
              40038004 
              40038048 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\mega_project_main.d -o.\objects\mega_project_main.o -
I.\RTE\_Target_1 -I"C:\Program Files (x86)\Keil_v5\ARM\PACK\ARM\CMSIS\5.9.0\CMS
IS\Core\Include" -I"C:\Program Files (x86)\Keil_v5\ARM\PACK\Keil\TM4C_DFP\1.1.0
\Device\Include\TM4C123" --predefine="__EVAL SETA 1" --predefine="__UVISION_VER
SION SETA 526" --predefine="_RTE_ SETA 1" --predefine="TM4C123GH6PM SETA 1" --l
ist=.\listings\mega_project_main.lst MEGA_project_Main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 1 in file MEGA_project_Data.s
   Uses
      None
Comment: DATA unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

LOOPDELAY 0000002E

Symbol: LOOPDELAY
   Definitions
      At line 40 in file MEGA_project_Main.s
   Uses
      At line 43 in file MEGA_project_Main.s
Comment: LOOPDELAY used once
MEGA_project_Main 00000000

Symbol: MEGA_project_Main
   Definitions
      At line 11 in file MEGA_project_Main.s
   Uses
      None
Comment: MEGA_project_Main unused
_CLEARBITS 00000012

Symbol: _CLEARBITS
   Definitions
      At line 28 in file MEGA_project_Main.s
   Uses
      At line 102 in macro CLEARBITS
      at line 106 in file MEGA_project_Main.s
Comment: _CLEARBITS used once
_DELAY 00000028

Symbol: _DELAY
   Definitions
      At line 37 in file MEGA_project_Main.s
   Uses
      None
Comment: _DELAY unused
_QUICKSEND 00000190

Symbol: _QUICKSEND
   Definitions
      At line 191 in file MEGA_project_Main.s
   Uses
      None
Comment: _QUICKSEND unused
_RECEIVE 00000174

Symbol: _RECEIVE
   Definitions
      At line 176 in file MEGA_project_Main.s
   Uses
      None
Comment: _RECEIVE unused
_SETBITS 00000000

Symbol: _SETBITS
   Definitions
      At line 18 in file MEGA_project_Main.s
   Uses
      At line 95 in macro SETBITS
      at line 91 in file MEGA_project_Main.s
Comment: _SETBITS used once
_TRANSCEND 000001BA



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: _TRANSCEND
   Definitions
      At line 199 in file MEGA_project_Main.s
   Uses
      At line 263 in file MEGA_project_Main.s
      At line 266 in file MEGA_project_Main.s
      At line 268 in file MEGA_project_Main.s
      At line 271 in file MEGA_project_Main.s
      At line 274 in file MEGA_project_Main.s
      At line 276 in file MEGA_project_Main.s

_TRANSMIT 00000158

Symbol: _TRANSMIT
   Definitions
      At line 163 in file MEGA_project_Main.s
   Uses
      At line 81 in macro TRANSMIT8BITS
      at line 192 in file MEGA_project_Main.s
      At line 204 in file MEGA_project_Main.s

_TURN_OFF_DOWN_LED 000002BE

Symbol: _TURN_OFF_DOWN_LED
   Definitions
      At line 339 in file MEGA_project_Main.s
   Uses
      None
Comment: _TURN_OFF_DOWN_LED unused
_TURN_OFF_LEFT_LED 000002E6

Symbol: _TURN_OFF_LEFT_LED
   Definitions
      At line 351 in file MEGA_project_Main.s
   Uses
      None
Comment: _TURN_OFF_LEFT_LED unused
_TURN_OFF_RIGHT_LED 00000296

Symbol: _TURN_OFF_RIGHT_LED
   Definitions
      At line 327 in file MEGA_project_Main.s
   Uses
      None
Comment: _TURN_OFF_RIGHT_LED unused
_TURN_OFF_UP_LED 0000026E

Symbol: _TURN_OFF_UP_LED
   Definitions
      At line 315 in file MEGA_project_Main.s
   Uses
      None
Comment: _TURN_OFF_UP_LED unused
_TURN_ON_DOWN_LED 000002AA

Symbol: _TURN_ON_DOWN_LED
   Definitions
      At line 333 in file MEGA_project_Main.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Uses
      None
Comment: _TURN_ON_DOWN_LED unused
_TURN_ON_LEFT_LED 000002D2

Symbol: _TURN_ON_LEFT_LED
   Definitions
      At line 345 in file MEGA_project_Main.s
   Uses
      None
Comment: _TURN_ON_LEFT_LED unused
_TURN_ON_RIGHT_LED 00000282

Symbol: _TURN_ON_RIGHT_LED
   Definitions
      At line 321 in file MEGA_project_Main.s
   Uses
      None
Comment: _TURN_ON_RIGHT_LED unused
_TURN_ON_UP_LED 0000025A

Symbol: _TURN_ON_UP_LED
   Definitions
      At line 309 in file MEGA_project_Main.s
   Uses
      None
Comment: _TURN_ON_UP_LED unused
_WAIT_FOR_CLEAR_OUTPUT_FIFO 0000015C

Symbol: _WAIT_FOR_CLEAR_OUTPUT_FIFO
   Definitions
      At line 165 in file MEGA_project_Main.s
   Uses
      At line 169 in file MEGA_project_Main.s
Comment: _WAIT_FOR_CLEAR_OUTPUT_FIFO used once
_WAIT_FOR_RECEIVE_OUTPUT_FIFO 00000178

Symbol: _WAIT_FOR_RECEIVE_OUTPUT_FIFO
   Definitions
      At line 178 in file MEGA_project_Main.s
   Uses
      At line 182 in file MEGA_project_Main.s
Comment: _WAIT_FOR_RECEIVE_OUTPUT_FIFO used once
__main 000001D2

Symbol: __main
   Definitions
      At line 210 in file MEGA_project_Main.s
   Uses
      At line 10 in file MEGA_project_Main.s
Comment: __main used once
_adc_initialization 000000A0

Symbol: _adc_initialization
   Definitions
      At line 114 in file MEGA_project_Main.s
   Uses
      At line 230 in file MEGA_project_Main.s
Comment: _adc_initialization used once



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

_led_initialization 00000082

Symbol: _led_initialization
   Definitions
      At line 103 in file MEGA_project_Main.s
   Uses
      At line 215 in file MEGA_project_Main.s
Comment: _led_initialization used once
_led_pins_activation 00000064

Symbol: _led_pins_activation
   Definitions
      At line 88 in file MEGA_project_Main.s
   Uses
      At line 212 in file MEGA_project_Main.s
Comment: _led_pins_activation used once
_read_adc 0000004E

Symbol: _read_adc
   Definitions
      At line 68 in file MEGA_project_Main.s
   Uses
      At line 254 in file MEGA_project_Main.s
      At line 257 in file MEGA_project_Main.s

_wait_adc 0000003E

Symbol: _wait_adc
   Definitions
      At line 52 in file MEGA_project_Main.s
   Uses
      At line 250 in file MEGA_project_Main.s
Comment: _wait_adc used once
_wait_for_adc_loop 00000042

Symbol: _wait_for_adc_loop
   Definitions
      At line 54 in file MEGA_project_Main.s
   Uses
      At line 58 in file MEGA_project_Main.s
Comment: _wait_for_adc_loop used once
loop 000001E6

Symbol: loop
   Definitions
      At line 240 in file MEGA_project_Main.s
   Uses
      At line 307 in file MEGA_project_Main.s
Comment: loop used once
27 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

ADCACTSS 40038000

Symbol: ADCACTSS
   Definitions
      At line 43 in file MEGA_project_Data.s
   Uses
      At line 101 in macro CLEARBITS
      at line 127 in file MEGA_project_Main.s
      At line 94 in macro SETBITS
      at line 135 in file MEGA_project_Main.s

ADCEMUX 40038014

Symbol: ADCEMUX
   Definitions
      At line 44 in file MEGA_project_Data.s
   Uses
      At line 101 in macro CLEARBITS
      at line 128 in file MEGA_project_Main.s
Comment: ADCEMUX used once
ADCISC 4003800C

Symbol: ADCISC
   Definitions
      At line 49 in file MEGA_project_Data.s
   Uses
      At line 94 in macro SETBITS
      at line 243 in file MEGA_project_Main.s
Comment: ADCISC used once
ADCPC 40038FC4

Symbol: ADCPC
   Definitions
      At line 42 in file MEGA_project_Data.s
   Uses
      At line 86 in macro WRITEBITS
      at line 134 in file MEGA_project_Main.s
Comment: ADCPC used once
ADCPSSI 40038028

Symbol: ADCPSSI
   Definitions
      At line 50 in file MEGA_project_Data.s
   Uses
      At line 94 in macro SETBITS
      at line 245 in file MEGA_project_Main.s
Comment: ADCPSSI used once
ADCRIS 40038004

Symbol: ADCRIS
   Definitions
      At line 47 in file MEGA_project_Data.s
   Uses
      At line 249 in file MEGA_project_Main.s
Comment: ADCRIS used once
ADCSAC 40038030

Symbol: ADCSAC
   Definitions



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

      At line 51 in file MEGA_project_Data.s
   Uses
      None
Comment: ADCSAC unused
ADCSSCTL0 40038044

Symbol: ADCSSCTL0
   Definitions
      At line 46 in file MEGA_project_Data.s
   Uses
      At line 86 in macro WRITEBITS
      at line 131 in file MEGA_project_Main.s
Comment: ADCSSCTL0 used once
ADCSSFIFO0 40038048

Symbol: ADCSSFIFO0
   Definitions
      At line 48 in file MEGA_project_Data.s
   Uses
      At line 253 in file MEGA_project_Main.s
      At line 256 in file MEGA_project_Main.s

ADCSSMUX0 40038040

Symbol: ADCSSMUX0
   Definitions
      At line 45 in file MEGA_project_Data.s
   Uses
      At line 86 in macro WRITEBITS
      at line 130 in file MEGA_project_Main.s
Comment: ADCSSMUX0 used once
GPIOAAFSEL 40004420

Symbol: GPIOAAFSEL
   Definitions
      At line 13 in file MEGA_project_Data.s
   Uses
      At line 94 in macro SETBITS
      at line 142 in file MEGA_project_Main.s
Comment: GPIOAAFSEL used once
GPIOADATA_RW 400043FC

Symbol: GPIOADATA_RW
   Definitions
      At line 10 in file MEGA_project_Data.s
   Uses
      None
Comment: GPIOADATA_RW unused
GPIOADEN 4000451C

Symbol: GPIOADEN
   Definitions
      At line 12 in file MEGA_project_Data.s
   Uses
      At line 94 in macro SETBITS
      at line 139 in file MEGA_project_Main.s
Comment: GPIOADEN used once
GPIOADIR 40004400




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

Symbol: GPIOADIR
   Definitions
      At line 11 in file MEGA_project_Data.s
   Uses
      None
Comment: GPIOADIR unused
GPIOAPCTL 4000452C

Symbol: GPIOAPCTL
   Definitions
      At line 14 in file MEGA_project_Data.s
   Uses
      None
Comment: GPIOAPCTL unused
GPIOBDATA_RW 400053FC

Symbol: GPIOBDATA_RW
   Definitions
      At line 17 in file MEGA_project_Data.s
   Uses
      At line 101 in macro CLEARBITS
      at line 106 in file MEGA_project_Main.s
      At line 94 in macro SETBITS
      at line 311 in file MEGA_project_Main.s

GPIOBDEN 4000551C

Symbol: GPIOBDEN
   Definitions
      At line 19 in file MEGA_project_Data.s
   Uses
      At line 94 in macro SETBITS
      at line 92 in file MEGA_project_Main.s
Comment: GPIOBDEN used once
GPIOBDIR 40005400

Symbol: GPIOBDIR
   Definitions
      At line 18 in file MEGA_project_Data.s
   Uses
      At line 94 in macro SETBITS
      at line 105 in file MEGA_project_Main.s
Comment: GPIOBDIR used once
GPIOEAFSEL 40024420

Symbol: GPIOEAFSEL
   Definitions
      At line 39 in file MEGA_project_Data.s
   Uses
      None
Comment: GPIOEAFSEL unused
GPIOEAMSEL 40024528

Symbol: GPIOEAMSEL
   Definitions
      At line 38 in file MEGA_project_Data.s
   Uses
      At line 94 in macro SETBITS
      at line 122 in file MEGA_project_Main.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols

Comment: GPIOEAMSEL used once
GPIOEDATA_RW 400243FC

Symbol: GPIOEDATA_RW
   Definitions
      At line 22 in file MEGA_project_Data.s
   Uses
      None
Comment: GPIOEDATA_RW unused
GPIOEDEN 4002451C

Symbol: GPIOEDEN
   Definitions
      At line 24 in file MEGA_project_Data.s
   Uses
      At line 101 in macro CLEARBITS
      at line 121 in file MEGA_project_Main.s
Comment: GPIOEDEN used once
GPIOEDIR 40024400

Symbol: GPIOEDIR
   Definitions
      At line 23 in file MEGA_project_Data.s
   Uses
      None
Comment: GPIOEDIR unused
GPIOFDATA_RW 400253FC

Symbol: GPIOFDATA_RW
   Definitions
      At line 27 in file MEGA_project_Data.s
   Uses
      None
Comment: GPIOFDATA_RW unused
GPIOFDEN 4002551C

Symbol: GPIOFDEN
   Definitions
      At line 29 in file MEGA_project_Data.s
   Uses
      None
Comment: GPIOFDEN unused
GPIOFDIR 40025400

Symbol: GPIOFDIR
   Definitions
      At line 28 in file MEGA_project_Data.s
   Uses
      None
Comment: GPIOFDIR unused
LED_DOWN 00000010

Symbol: LED_DOWN
   Definitions
      At line 73 in file MEGA_project_Data.s
   Uses
      At line 93 in macro SETBITS
      at line 335 in file MEGA_project_Main.s
      At line 100 in macro CLEARBITS



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Absolute symbols

      at line 341 in file MEGA_project_Main.s

LED_LEFT 00000040

Symbol: LED_LEFT
   Definitions
      At line 74 in file MEGA_project_Data.s
   Uses
      At line 93 in macro SETBITS
      at line 347 in file MEGA_project_Main.s
      At line 100 in macro CLEARBITS
      at line 353 in file MEGA_project_Main.s

LED_RIGHT 00000004

Symbol: LED_RIGHT
   Definitions
      At line 72 in file MEGA_project_Data.s
   Uses
      At line 93 in macro SETBITS
      at line 323 in file MEGA_project_Main.s
      At line 100 in macro CLEARBITS
      at line 329 in file MEGA_project_Main.s

LED_UP 00000001

Symbol: LED_UP
   Definitions
      At line 71 in file MEGA_project_Data.s
   Uses
      At line 93 in macro SETBITS
      at line 311 in file MEGA_project_Main.s
      At line 100 in macro CLEARBITS
      at line 317 in file MEGA_project_Main.s

RCGCADC 400FE638

Symbol: RCGCADC
   Definitions
      At line 34 in file MEGA_project_Data.s
   Uses
      At line 94 in macro SETBITS
      at line 118 in file MEGA_project_Main.s
Comment: RCGCADC used once
RCGCGPIO 400FE608

Symbol: RCGCGPIO
   Definitions
      At line 3 in file MEGA_project_Data.s
   Uses
      At line 94 in macro SETBITS
      at line 91 in file MEGA_project_Main.s
Comment: RCGCGPIO used once
RCGCUART 400FE618

Symbol: RCGCUART
   Definitions
      At line 54 in file MEGA_project_Data.s
   Uses



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Absolute symbols

      At line 94 in macro SETBITS
      at line 140 in file MEGA_project_Main.s
Comment: RCGCUART used once
THRESH_HIGH 00000DF0

Symbol: THRESH_HIGH
   Definitions
      At line 68 in file MEGA_project_Data.s
   Uses
      At line 238 in file MEGA_project_Main.s
Comment: THRESH_HIGH used once
THRESH_LOW 000000FE

Symbol: THRESH_LOW
   Definitions
      At line 67 in file MEGA_project_Data.s
   Uses
      At line 237 in file MEGA_project_Main.s
Comment: THRESH_LOW used once
UART0 4000C000

Symbol: UART0
   Definitions
      At line 57 in file MEGA_project_Data.s
   Uses
      At line 58 in file MEGA_project_Data.s
      At line 59 in file MEGA_project_Data.s
      At line 60 in file MEGA_project_Data.s
      At line 61 in file MEGA_project_Data.s
      At line 62 in file MEGA_project_Data.s
      At line 63 in file MEGA_project_Data.s
      At line 64 in file MEGA_project_Data.s

UART0CC 4000CFC8

Symbol: UART0CC
   Definitions
      At line 64 in file MEGA_project_Data.s
   Uses
      At line 86 in macro WRITEBITS
      at line 152 in file MEGA_project_Main.s
Comment: UART0CC used once
UART0CTL 4000C030

Symbol: UART0CTL
   Definitions
      At line 63 in file MEGA_project_Data.s
   Uses
      At line 101 in macro CLEARBITS
      at line 146 in file MEGA_project_Main.s
      At line 86 in macro WRITEBITS
      at line 153 in file MEGA_project_Main.s

UART0DR 4000C000

Symbol: UART0DR
   Definitions
      At line 58 in file MEGA_project_Data.s
   Uses



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Absolute symbols

      At line 171 in file MEGA_project_Main.s
      At line 183 in file MEGA_project_Main.s

UART0FBRD 4000C028

Symbol: UART0FBRD
   Definitions
      At line 61 in file MEGA_project_Data.s
   Uses
      At line 86 in macro WRITEBITS
      at line 150 in file MEGA_project_Main.s
Comment: UART0FBRD used once
UART0FR 4000C018

Symbol: UART0FR
   Definitions
      At line 59 in file MEGA_project_Data.s
   Uses
      At line 166 in file MEGA_project_Main.s
      At line 179 in file MEGA_project_Main.s

UART0IBRD 4000C024

Symbol: UART0IBRD
   Definitions
      At line 60 in file MEGA_project_Data.s
   Uses
      At line 86 in macro WRITEBITS
      at line 149 in file MEGA_project_Main.s
Comment: UART0IBRD used once
UART0LCRH 4000C02C

Symbol: UART0LCRH
   Definitions
      At line 62 in file MEGA_project_Data.s
   Uses
      At line 86 in macro WRITEBITS
      at line 151 in file MEGA_project_Main.s
Comment: UART0LCRH used once
43 symbols
408 symbols in table
